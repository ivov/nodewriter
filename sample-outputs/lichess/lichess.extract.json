{
  "descriptors": {
    "name": "Lichess",
    "description": "# Introduction Welcome to the reference for the Lichess API! Lichess is free/libre, open-source chess server powered by ...",
    "baseUrl": "https://lichess.org",
    "specVersion": "2.0.0",
    "openApiVersion": "3.1.0",
    "nodeTypeClassName": "Lichess",
    "auth": [
      {
        "type": "oauth2:authorization-code",
        "authorizationUrl": "https://lichess.org/oauth",
        "tokenUrl": "https://lichess.org/api/token",
        "scopes": [
          "preference:read",
          "preference:write",
          "email:read",
          "engine:read",
          "engine:write",
          "challenge:read",
          "challenge:write",
          "challenge:bulk",
          "study:read",
          "study:write",
          "tournament:write",
          "racer:write",
          "puzzle:read",
          "team:read",
          "team:write",
          "team:lead",
          "follow:read",
          "follow:write",
          "msg:write",
          "board:play",
          "bot:play",
          "web:mod"
        ],
        "credTypeClassName": "LichessOAuth2Api"
      }
    ],
    "docsUrl": "https://docs.n8n.io/integrations/creating-nodes/",
    "resources": [
      "User",
      "Puzzle",
      "Account",
      "Game",
      "TV",
      "Arena tournament",
      "Swiss tournament",
      "Team",
      "Study",
      "Broadcast",
      "FIDE",
      "Simul",
      "Relation",
      "Board",
      "Bot",
      "Challenge",
      "Bulk pairing",
      "Messaging",
      "Analysis",
      "External engine",
      "OAuth",
      "Opening Explorer",
      "Tablebase"
    ]
  },
  "operations": {
    "apiUsersStatus": {
      "displayName": "Get real-time users status",
      "description": "Read the `online`, `playing` and `streaming` flags of several users. This API is very fast and cheap on lichess side. So...",
      "method": "get",
      "endpoint": "/api/users/status",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "ids",
          "location": "query",
          "required": true,
          "description": "User IDs separated by commas. Up to 100 IDs",
          "type": "string",
          "default": "",
          "placeholder": "e.g. thibault,maia1,maia5"
        },
        {
          "name": "withSignal",
          "location": "query",
          "required": false,
          "description": "Also return the network signal of the player, when available. It ranges from 1 (poor connection, lag > 500ms) to 4 (grea...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "withGameIds",
          "location": "query",
          "required": false,
          "description": "Also return the ID of the game being played, if any, for each player, in a `playingId` field. Defaults to `false` to pre...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "withGameMetas",
          "location": "query",
          "required": false,
          "description": "Also return the id, time control and variant of the game being played, if any, for each player, in a `playing` field. De...",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "player": {
      "displayName": "Get all top 10",
      "description": "Get the top 10 players for each speed and variant. See <https://lichess.org/player>.",
      "method": "get",
      "endpoint": "/api/player",
      "tags": [
        "User"
      ],
      "params": []
    },
    "playerTopNbPerfType": {
      "displayName": "Get one leaderboard",
      "description": "Get the leaderboard for a single speed or variant (a.k.a. `perfType`). There is no leaderboard for correspondence or puz...",
      "method": "get",
      "endpoint": "/api/player/top/{nb}/{perfType}",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "nb",
          "location": "path",
          "required": true,
          "description": "How many users to fetch",
          "type": "number",
          "default": 0
        },
        {
          "name": "perfType",
          "location": "path",
          "required": true,
          "description": "The speed or variant",
          "type": "options",
          "default": "ultraBullet",
          "options": [
            "ultraBullet",
            "bullet",
            "blitz",
            "rapid",
            "classical",
            "chess960",
            "crazyhouse",
            "antichess",
            "atomic",
            "horde",
            "kingOfTheHill",
            "racingKings",
            "threeCheck"
          ]
        }
      ]
    },
    "apiUser": {
      "displayName": "Get user public data",
      "description": "Read public data of a user.",
      "method": "get",
      "endpoint": "/api/user/{username}",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "trophies",
          "location": "query",
          "required": false,
          "description": "Include user trophies",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "apiUserRatingHistory": {
      "displayName": "Get rating history of a user",
      "description": "Read rating history of a user, for all perf types. There is at most one entry per day. Format of an entry is `[year, mon...",
      "method": "get",
      "endpoint": "/api/user/{username}/rating-history",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiUserPerf": {
      "displayName": "Get performance statistics of a user",
      "description": "Read performance statistics of a user, for a single performance. Similar to the [performance pages on the website](https...",
      "method": "get",
      "endpoint": "/api/user/{username}/perf/{perf}",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "perf",
          "location": "path",
          "required": true,
          "description": "",
          "type": "options",
          "default": "ultraBullet",
          "options": [
            "ultraBullet",
            "bullet",
            "blitz",
            "rapid",
            "classical",
            "correspondence",
            "chess960",
            "crazyhouse",
            "antichess",
            "atomic",
            "horde",
            "kingOfTheHill",
            "racingKings",
            "threeCheck"
          ]
        }
      ]
    },
    "apiUserActivity": {
      "displayName": "Get user activity",
      "description": "Read data to generate the activity feed of a user.",
      "method": "get",
      "endpoint": "/api/user/{username}/activity",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiPuzzleDaily": {
      "displayName": "Get the daily puzzle",
      "description": "Get the daily Lichess puzzle in JSON format. Alternatively, you can [post it in your slack workspace](https://lichess.or...",
      "method": "get",
      "endpoint": "/api/puzzle/daily",
      "tags": [
        "Puzzle"
      ],
      "params": []
    },
    "apiPuzzleId": {
      "displayName": "Get a puzzle by its ID",
      "description": "Get a single Lichess puzzle in JSON format",
      "method": "get",
      "endpoint": "/api/puzzle/{id}",
      "tags": [
        "Puzzle"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The puzzle ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiPuzzleNext": {
      "displayName": "Get a new puzzle",
      "description": "Get a random Lichess puzzle in JSON format.  If authenticated, only returns puzzles that the user has never seen before....",
      "method": "get",
      "endpoint": "/api/puzzle/next",
      "tags": [
        "Puzzle"
      ],
      "params": [
        {
          "name": "angle",
          "location": "query",
          "required": false,
          "description": "The theme or opening to filter puzzles with.  Available themes are listed in [the lichess source code](https://github.co...",
          "type": "string",
          "default": ""
        },
        {
          "name": "difficulty",
          "location": "query",
          "required": false,
          "description": "The desired puzzle difficulty, relative to the authenticated user puzzle rating, or 1500 if anonymous",
          "type": "options",
          "default": "easiest",
          "options": [
            "easiest",
            "easier",
            "normal",
            "harder",
            "hardest"
          ]
        }
      ]
    },
    "apiPuzzleActivity": {
      "displayName": "Get your puzzle activity",
      "description": "Download your puzzle activity in [ndjson](#section/Introduction/Streaming-with-ND-JSON) format. Puzzle activity is sorte...",
      "method": "get",
      "endpoint": "/api/puzzle/activity",
      "tags": [
        "Puzzle"
      ],
      "params": [
        {
          "name": "max",
          "location": "query",
          "required": false,
          "description": "How many entries to download. Leave empty to download all activity",
          "type": "number",
          "default": 0
        },
        {
          "name": "before",
          "location": "query",
          "required": false,
          "description": "Download entries before this timestamp. Defaults to now. Use `before` and `max` for pagination",
          "type": "number",
          "default": 0
        }
      ]
    },
    "apiPuzzleReplay": {
      "displayName": "Get puzzles to replay",
      "description": "Gets the puzzle IDs of remaining puzzles to re-attempt in JSON format",
      "method": "get",
      "endpoint": "/api/puzzle/replay/{days}/{theme}",
      "tags": [
        "Puzzle"
      ],
      "params": [
        {
          "name": "days",
          "location": "path",
          "required": true,
          "description": "How many days to look back when aggregating puzzle results. 30 is sensible",
          "type": "number",
          "default": 0
        },
        {
          "name": "theme",
          "location": "path",
          "required": true,
          "description": "The theme or opening to filter puzzles with",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiPuzzleDashboard": {
      "displayName": "Get your puzzle dashboard",
      "description": "Download your [puzzle dashboard](https://lichess.org/training/dashboard/30/dashboard) as JSON. Also includes all puzzle ...",
      "method": "get",
      "endpoint": "/api/puzzle/dashboard/{days}",
      "tags": [
        "Puzzle"
      ],
      "params": [
        {
          "name": "days",
          "location": "path",
          "required": true,
          "description": "How many days to look back when aggregating puzzle results. 30 is sensible",
          "type": "number",
          "default": 0
        }
      ]
    },
    "apiStormDashboard": {
      "displayName": "Get the storm dashboard of a player",
      "description": "Download the [storm dashboard](https://lichess.org/storm/dashboard/mrbasso) of any player as JSON. Contains the aggregat...",
      "method": "get",
      "endpoint": "/api/storm/dashboard/{username}",
      "tags": [
        "Puzzle"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "Username of the player",
          "type": "string",
          "default": ""
        },
        {
          "name": "days",
          "location": "query",
          "required": false,
          "description": "How many days of history to return",
          "type": "number",
          "default": 30
        }
      ]
    },
    "racerPost": {
      "displayName": "Create and join a puzzle race",
      "description": "Create a new private [puzzle race](https://lichess.org/racer). The Lichess user who creates the race must join the race ...",
      "method": "post",
      "endpoint": "/api/racer",
      "tags": [
        "Puzzle"
      ],
      "params": []
    },
    "apiUsers": {
      "displayName": "Get users by ID",
      "description": "Get up to 300 users by their IDs. Users are returned in the same order as the IDs. The method is `POST` to allow a longe...",
      "method": "post",
      "endpoint": "/api/users",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "text",
          "location": "body",
          "required": true,
          "type": "string",
          "default": "",
          "description": "User IDs separated by commas",
          "placeholder": "e.g. thibault,maia1,maia5"
        }
      ],
      "headers": {
        "Content-Type": "text/plain"
      }
    },
    "accountMe": {
      "displayName": "Get my profile",
      "description": "Public information about the logged in user.",
      "method": "get",
      "endpoint": "/api/account",
      "tags": [
        "Account"
      ],
      "params": []
    },
    "accountEmail": {
      "displayName": "Get my email address",
      "description": "Read the email address of the logged in user.",
      "method": "get",
      "endpoint": "/api/account/email",
      "tags": [
        "Account"
      ],
      "params": []
    },
    "account": {
      "displayName": "Get my preferences",
      "description": "Read the preferences of the logged in user. - <https://lichess.org/account/preferences/game-display> - <https://github.c...",
      "method": "get",
      "endpoint": "/api/account/preferences",
      "tags": [
        "Account"
      ],
      "params": []
    },
    "accountKid": {
      "displayName": "Get my kid mode status",
      "description": "Read the kid mode status of the logged in user. - <https://lichess.org/account/kid>",
      "method": "get",
      "endpoint": "/api/account/kid",
      "tags": [
        "Account"
      ],
      "params": []
    },
    "accountKidPost": {
      "displayName": "Set my kid mode status",
      "description": "Set the kid mode status of the logged in user. - <https://lichess.org/account/kid>",
      "method": "post",
      "endpoint": "/api/account/kid",
      "tags": [
        "Account"
      ],
      "params": [
        {
          "name": "v",
          "location": "query",
          "required": true,
          "description": "Kid mode status",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "timeline": {
      "displayName": "Get my timeline",
      "description": "Get the timeline events of the logged in user.",
      "method": "get",
      "endpoint": "/api/timeline",
      "tags": [
        "Account"
      ],
      "params": [
        {
          "name": "since",
          "location": "query",
          "required": false,
          "description": "Show events since this timestamp",
          "type": "number",
          "default": 0
        },
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "Max number of events to fetch",
          "type": "number",
          "default": 15
        }
      ]
    },
    "gamePgn": {
      "displayName": "Export one game",
      "description": "Download one game in either PGN or JSON format. Ongoing games are delayed by a few seconds ranging from 3 to 60 dependin...",
      "method": "get",
      "endpoint": "/game/export/{gameId}",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "The game ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "evals",
          "location": "query",
          "required": false,
          "description": "Include analysis evaluations and comments, when available. Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eva...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "accuracy",
          "location": "query",
          "required": false,
          "description": "Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": true
        },
        {
          "name": "division",
          "location": "query",
          "required": false,
          "description": "Plies which mark the beginning of the middlegame and endgame. Only available in JSON",
          "type": "boolean",
          "default": true
        },
        {
          "name": "literate",
          "location": "query",
          "required": false,
          "description": "Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination. Example: `...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "withBookmarked",
          "location": "query",
          "required": false,
          "description": "Add a `bookmarked: true` JSON field when the logged in user has bookmarked the game. The response type must be set to `a...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "players",
          "location": "query",
          "required": false,
          "description": "URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN. Example: <htt...",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiUserCurrentGame": {
      "displayName": "Export ongoing game of a user",
      "description": "Download the ongoing game, or the last game played, of a user. Available in either PGN or JSON format. Ongoing games are...",
      "method": "get",
      "endpoint": "/api/user/{username}/current-game",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "evals",
          "location": "query",
          "required": false,
          "description": "Include analysis evaluations and comments, when available. Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eva...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "accuracy",
          "location": "query",
          "required": false,
          "description": "Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": true
        },
        {
          "name": "division",
          "location": "query",
          "required": false,
          "description": "Plies which mark the beginning of the middlegame and endgame. Only available in JSON",
          "type": "boolean",
          "default": false
        },
        {
          "name": "literate",
          "location": "query",
          "required": false,
          "description": "Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination. Example: `...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "players",
          "location": "query",
          "required": false,
          "description": "URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN. Example: <htt...",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiGamesUser": {
      "displayName": "Export games of a user",
      "description": "Download all games of any user in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format. Games are sorted...",
      "method": "get",
      "endpoint": "/api/games/user/{username}",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "The user name",
          "type": "string",
          "default": ""
        },
        {
          "name": "since",
          "location": "query",
          "required": false,
          "description": "Download games played since this timestamp. Defaults to account creation date",
          "type": "number",
          "default": 0
        },
        {
          "name": "until",
          "location": "query",
          "required": false,
          "description": "Download games played until this timestamp. Defaults to now",
          "type": "number",
          "default": 0
        },
        {
          "name": "max",
          "location": "query",
          "required": false,
          "description": "How many games to download. Leave empty to download all games",
          "type": "number",
          "default": 0
        },
        {
          "name": "vs",
          "location": "query",
          "required": false,
          "description": "[Filter] Only games played against this opponent",
          "type": "string",
          "default": ""
        },
        {
          "name": "rated",
          "location": "query",
          "required": false,
          "description": "[Filter] Only rated (`true`) or casual (`false`) games",
          "type": "boolean",
          "default": false
        },
        {
          "name": "perfType",
          "location": "query",
          "required": false,
          "description": "[Filter] Only games in these speeds or variants. Multiple perf types can be specified, separated by a comma. Example: bl...",
          "type": "options",
          "default": "ultraBullet",
          "options": [
            "ultraBullet",
            "bullet",
            "blitz",
            "rapid",
            "classical",
            "correspondence",
            "chess960",
            "crazyhouse",
            "antichess",
            "atomic",
            "horde",
            "kingOfTheHill",
            "racingKings",
            "threeCheck"
          ]
        },
        {
          "name": "color",
          "location": "query",
          "required": false,
          "description": "[Filter] Only games played as this color",
          "type": "options",
          "default": "white",
          "options": [
            "white",
            "black"
          ]
        },
        {
          "name": "analysed",
          "location": "query",
          "required": false,
          "description": "[Filter] Only games with or without a computer analysis available",
          "type": "boolean",
          "default": false
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field. The response type must be set to `application/x-ndjson`...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "evals",
          "location": "query",
          "required": false,
          "description": "Include analysis evaluations and comments, when available. Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eva...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "accuracy",
          "location": "query",
          "required": false,
          "description": "Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "division",
          "location": "query",
          "required": false,
          "description": "Plies which mark the beginning of the middlegame and endgame. Only available in JSON",
          "type": "boolean",
          "default": false
        },
        {
          "name": "ongoing",
          "location": "query",
          "required": false,
          "description": "Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "finished",
          "location": "query",
          "required": false,
          "description": "Include finished games. Set to `false` to only get ongoing games",
          "type": "boolean",
          "default": true
        },
        {
          "name": "literate",
          "location": "query",
          "required": false,
          "description": "Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination. Example: `...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "lastFen",
          "location": "query",
          "required": false,
          "description": "Include the FEN notation of the last position of the game. The response type must be set to `application/x-ndjson` by th...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "withBookmarked",
          "location": "query",
          "required": false,
          "description": "Add a `bookmarked: true` JSON field when the logged in user has bookmarked the game. The response type must be set to `a...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "players",
          "location": "query",
          "required": false,
          "description": "URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN. Example: <htt...",
          "type": "string",
          "default": ""
        },
        {
          "name": "sort",
          "location": "query",
          "required": false,
          "description": "Sort order of the games",
          "type": "options",
          "default": "dateDesc",
          "options": [
            "dateAsc",
            "dateDesc"
          ]
        }
      ]
    },
    "gamesExportIds": {
      "displayName": "Export games by IDs",
      "description": "Download games by IDs in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request ...",
      "method": "post",
      "endpoint": "/api/games/export/_ids",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "evals",
          "location": "query",
          "required": false,
          "description": "Include analysis evaluations and comments, when available. Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eva...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "accuracy",
          "location": "query",
          "required": false,
          "description": "Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "division",
          "location": "query",
          "required": false,
          "description": "Plies which mark the beginning of the middlegame and endgame. Only available in JSON",
          "type": "boolean",
          "default": false
        },
        {
          "name": "literate",
          "location": "query",
          "required": false,
          "description": "Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination. Example: `...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "players",
          "location": "query",
          "required": false,
          "description": "URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN. Example: <htt...",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "type": "string",
          "default": "",
          "description": "Game IDs separated by commas. Up to 300",
          "placeholder": "e.g. TJxUmbWK,4OtIh2oh,ILwozzRZ"
        }
      ],
      "headers": {
        "Content-Type": "text/plain"
      }
    },
    "gamesByUsers": {
      "displayName": "Stream games of users",
      "description": "Stream the games played between a list of users, in real time. Only games where **both players** are part of the list ar...",
      "method": "post",
      "endpoint": "/api/stream/games-by-users",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "withCurrentGames",
          "location": "query",
          "required": false,
          "description": "Include the already started games at the beginning of the stream",
          "type": "boolean",
          "default": false
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "type": "string",
          "default": "",
          "description": "Up to 300 user IDs separated by commas. Example: `thibault,maia1,maia5`"
        }
      ],
      "headers": {
        "Content-Type": "text/plain"
      }
    },
    "gamesByIds": {
      "displayName": "Stream games by IDs",
      "description": "Creates a stream of games from an arbitrary streamId, and a list of game IDs. The stream first outputs the games that al...",
      "method": "post",
      "endpoint": "/api/stream/games/{streamId}",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "streamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "type": "string",
          "default": "",
          "description": "Up to 500 or 1000 game IDs separated by commas. Example: `gameId01,gameId02,gameId03`"
        }
      ],
      "headers": {
        "Content-Type": "text/plain"
      }
    },
    "gamesByIdsAdd": {
      "displayName": "Add game IDs to stream",
      "description": "Add new game IDs for [an existing stream](#operation/gamesByIds) to watch. The stream will immediately outputs the games...",
      "method": "post",
      "endpoint": "/api/stream/games/{streamId}/add",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "streamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "type": "string",
          "default": "",
          "description": "Up to 500 or 1000 game IDs separated by commas. Example: `gameId04,gameId05,gameId06`"
        }
      ],
      "headers": {
        "Content-Type": "text/plain"
      }
    },
    "apiAccountPlaying": {
      "displayName": "Get my ongoing games",
      "description": "Get the ongoing games of the current user. Real-time and correspondence games are included. The most urgent games are li...",
      "method": "get",
      "endpoint": "/api/account/playing",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "Max number of games to fetch",
          "type": "number",
          "default": 9
        }
      ]
    },
    "streamGame": {
      "displayName": "Stream moves of a game",
      "description": "Stream positions and moves of any ongoing game, in [ndjson](#section/Introduction/Streaming-with-ND-JSON). A description...",
      "method": "get",
      "endpoint": "/api/stream/game/{id}",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "gameImport": {
      "displayName": "Import one game",
      "description": "Import a game from PGN. See <https://lichess.org/paste>. Rate limiting: 200 games per hour for OAuth requests, 100 games...",
      "method": "post",
      "endpoint": "/api/import",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "pgn",
          "location": "body",
          "required": false,
          "description": "The PGN. It can contain only one game. Most standard tags are supported",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "apiImportedGamesUser": {
      "displayName": "Export your imported games",
      "description": "Download all games imported by you. Games are exported in PGN format",
      "method": "get",
      "endpoint": "/api/games/export/imports",
      "tags": [
        "Game"
      ],
      "params": []
    },
    "apiExportBookmarks": {
      "displayName": "Export your bookmarked games",
      "description": "Download all games bookmarked by you, in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format. Games are...",
      "method": "get",
      "endpoint": "/api/games/export/bookmarks",
      "tags": [
        "Game"
      ],
      "params": [
        {
          "name": "since",
          "location": "query",
          "required": false,
          "description": "Download games bookmarked since this timestamp. Defaults to account creation date",
          "type": "number",
          "default": 0
        },
        {
          "name": "until",
          "location": "query",
          "required": false,
          "description": "Download games bookmarked until this timestamp. Defaults to now",
          "type": "number",
          "default": 0
        },
        {
          "name": "max",
          "location": "query",
          "required": false,
          "description": "How many bookmarked games to download. Leave empty to download all bookmarked games",
          "type": "number",
          "default": 0
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field. The response type must be set to `application/x-ndjson`...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "evals",
          "location": "query",
          "required": false,
          "description": "Include analysis evaluations and comments, when available. Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eva...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "accuracy",
          "location": "query",
          "required": false,
          "description": "Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "division",
          "location": "query",
          "required": false,
          "description": "Plies which mark the beginning of the middlegame and endgame. Only available in JSON",
          "type": "boolean",
          "default": false
        },
        {
          "name": "literate",
          "location": "query",
          "required": false,
          "description": "Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination. Example: `...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "lastFen",
          "location": "query",
          "required": false,
          "description": "Include the FEN notation of the last position of the game. The response type must be set to `application/x-ndjson` by th...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "sort",
          "location": "query",
          "required": false,
          "description": "Sort order of the bookmarks",
          "type": "options",
          "default": "dateDesc",
          "options": [
            "dateAsc",
            "dateDesc"
          ]
        }
      ]
    },
    "tvChannels": {
      "displayName": "Get current TV games",
      "description": "Get basic info about the best games being played for each speed and variant, but also computer games and bot games. See ...",
      "method": "get",
      "endpoint": "/api/tv/channels",
      "tags": [
        "TV"
      ],
      "params": []
    },
    "tvFeed": {
      "displayName": "Stream current TV game",
      "description": "Stream positions and moves of the current [TV game](https://lichess.org/tv) in [ndjson](#section/Introduction/Streaming-...",
      "method": "get",
      "endpoint": "/api/tv/feed",
      "tags": [
        "TV"
      ],
      "params": []
    },
    "tvChannelFeed": {
      "displayName": "Stream current TV game of a TV channel",
      "description": "Stream positions and moves of a current [TV channel's game](https://lichess.org/tv/rapid) in [ndjson](#section/Introduct...",
      "method": "get",
      "endpoint": "/api/tv/{channel}/feed",
      "tags": [
        "TV"
      ],
      "params": [
        {
          "name": "channel",
          "location": "path",
          "required": true,
          "description": "The name of the channel in camel case",
          "type": "string",
          "default": ""
        }
      ]
    },
    "tvChannelGames": {
      "displayName": "Get best ongoing games of a TV channel",
      "description": "Get a list of ongoing games for a given TV channel. Similar to [lichess.org/games](https://lichess.org/games). Available...",
      "method": "get",
      "endpoint": "/api/tv/{channel}",
      "tags": [
        "TV"
      ],
      "params": [
        {
          "name": "channel",
          "location": "path",
          "required": true,
          "description": "The name of the channel in camel case",
          "type": "string",
          "default": ""
        },
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "Number of games to fetch",
          "type": "number",
          "default": 10
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "apiTournament": {
      "displayName": "Get current tournaments",
      "description": "Get recently active and finished tournaments. This API is used to display the [Lichess tournament schedule](https://lich...",
      "method": "get",
      "endpoint": "/api/tournament",
      "tags": [
        "Arena tournament"
      ],
      "params": []
    },
    "apiTournamentPost": {
      "displayName": "Create a new Arena tournament",
      "description": "Create a public or private Arena tournament. This endpoint mirrors the form on <https://lichess.org/tournament/new>. You...",
      "method": "post",
      "endpoint": "/api/tournament",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "name",
          "location": "body",
          "required": false,
          "description": "The tournament name. Leave empty to get a random Grandmaster name",
          "type": "string",
          "default": ""
        },
        {
          "name": "clockTime",
          "location": "body",
          "required": true,
          "description": "Clock initial time in minutes",
          "type": "number",
          "default": 0
        },
        {
          "name": "clockIncrement",
          "location": "body",
          "required": true,
          "description": "Clock increment in seconds",
          "type": "number",
          "default": 0
        },
        {
          "name": "minutes",
          "location": "body",
          "required": true,
          "description": "How long the tournament lasts, in minutes",
          "type": "number",
          "default": 0
        },
        {
          "name": "waitMinutes",
          "location": "body",
          "required": false,
          "description": "How long to wait before starting the tournament, from now, in minutes",
          "type": "number",
          "default": 0
        },
        {
          "name": "startDate",
          "location": "body",
          "required": false,
          "description": "Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting",
          "type": "number",
          "default": 0
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "rated",
          "location": "body",
          "required": false,
          "description": "Games are rated and impact players ratings",
          "type": "boolean",
          "default": false
        },
        {
          "name": "position",
          "location": "body",
          "required": false,
          "description": "Custom initial position (in FEN). Variant must be standard, fromPosition, or chess960 (if a valid 960 starting position)...",
          "type": "string",
          "default": ""
        },
        {
          "name": "berserkable",
          "location": "body",
          "required": false,
          "description": "Whether the players can use berserk. Only allowed if clockIncrement <= clockTime * 2",
          "type": "boolean",
          "default": false
        },
        {
          "name": "streakable",
          "location": "body",
          "required": false,
          "description": "After 2 wins, consecutive wins grant 4 points instead of 2",
          "type": "boolean",
          "default": false
        },
        {
          "name": "hasChat",
          "location": "body",
          "required": false,
          "description": "Whether the players can discuss in a chat",
          "type": "boolean",
          "default": false
        },
        {
          "name": "description",
          "location": "body",
          "required": false,
          "description": "Anything you want to tell players about the tournament",
          "type": "string",
          "default": ""
        },
        {
          "name": "password",
          "location": "body",
          "required": false,
          "description": "Make the tournament private, and restrict access with a password. You can also [generate user-specific entry codes](http...",
          "type": "string",
          "default": ""
        },
        {
          "name": "teamBattleByTeam",
          "location": "body",
          "required": false,
          "description": "Set the ID of a team you lead to create a team battle. The other teams can be added using the [team battle edit endpoint...",
          "type": "string",
          "default": ""
        },
        {
          "name": "conditions.teamMember.teamId",
          "location": "body",
          "required": false,
          "description": "Restrict entry to members of a team. The teamId is the last part of a team URL, e.g. `https://lichess.org/team/coders` h...",
          "type": "string",
          "default": ""
        },
        {
          "name": "conditions.minRating.rating",
          "location": "body",
          "required": false,
          "description": "Minimum rating to join. Leave empty to let everyone join the tournament",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.maxRating.rating",
          "location": "body",
          "required": false,
          "description": "Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.nbRatedGame.nb",
          "location": "body",
          "required": false,
          "description": "Minimum number of rated games required to join",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.allowList",
          "location": "body",
          "required": false,
          "description": "Predefined list of usernames that are allowed to join, separated by commas. If this list is non-empty, then usernames ab...",
          "type": "string",
          "default": ""
        },
        {
          "name": "conditions.bots",
          "location": "body",
          "required": false,
          "description": "Whether bots are allowed to join the tournament",
          "type": "boolean",
          "default": false
        },
        {
          "name": "conditions.accountAge",
          "location": "body",
          "required": false,
          "description": "Minium account age in days required to join",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "tournament": {
      "displayName": "Get info about an Arena tournament",
      "description": "Get detailed info about recently finished, current, or upcoming tournament's duels, player standings, and other info.",
      "method": "get",
      "endpoint": "/api/tournament/{id}",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "page",
          "location": "query",
          "required": false,
          "description": "Specify which page of player standings to view",
          "type": "number",
          "default": 1
        }
      ]
    },
    "apiTournamentUpdate": {
      "displayName": "Update an Arena tournament",
      "description": "Update an Arena tournament. Be mindful not to make important changes to ongoing tournaments. Can be used to update a tea...",
      "method": "post",
      "endpoint": "/api/tournament/{id}",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "name",
          "location": "body",
          "required": false,
          "description": "The tournament name. Leave empty to get a random Grandmaster name",
          "type": "string",
          "default": ""
        },
        {
          "name": "clockTime",
          "location": "body",
          "required": true,
          "description": "Clock initial time in minutes",
          "type": "number",
          "default": 0
        },
        {
          "name": "clockIncrement",
          "location": "body",
          "required": true,
          "description": "Clock increment in seconds",
          "type": "number",
          "default": 0
        },
        {
          "name": "minutes",
          "location": "body",
          "required": true,
          "description": "How long the tournament lasts, in minutes",
          "type": "number",
          "default": 0
        },
        {
          "name": "waitMinutes",
          "location": "body",
          "required": false,
          "description": "How long to wait before starting the tournament, from now, in minutes",
          "type": "number",
          "default": 0
        },
        {
          "name": "startDate",
          "location": "body",
          "required": false,
          "description": "Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting",
          "type": "number",
          "default": 0
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "rated",
          "location": "body",
          "required": false,
          "description": "Games are rated and impact players ratings",
          "type": "boolean",
          "default": false
        },
        {
          "name": "position",
          "location": "body",
          "required": false,
          "description": "Custom initial position (in FEN). Variant must be standard, fromPosition, or chess960 (if a valid 960 starting position)...",
          "type": "string",
          "default": ""
        },
        {
          "name": "berserkable",
          "location": "body",
          "required": false,
          "description": "Whether the players can use berserk. Only allowed if clockIncrement <= clockTime * 2",
          "type": "boolean",
          "default": false
        },
        {
          "name": "streakable",
          "location": "body",
          "required": false,
          "description": "After 2 wins, consecutive wins grant 4 points instead of 2",
          "type": "boolean",
          "default": false
        },
        {
          "name": "hasChat",
          "location": "body",
          "required": false,
          "description": "Whether the players can discuss in a chat",
          "type": "boolean",
          "default": false
        },
        {
          "name": "description",
          "location": "body",
          "required": false,
          "description": "Anything you want to tell players about the tournament",
          "type": "string",
          "default": ""
        },
        {
          "name": "password",
          "location": "body",
          "required": false,
          "description": "Make the tournament private, and restrict access with a password",
          "type": "string",
          "default": ""
        },
        {
          "name": "conditions.minRating.rating",
          "location": "body",
          "required": false,
          "description": "Minimum rating to join. Leave empty to let everyone join the tournament",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.maxRating.rating",
          "location": "body",
          "required": false,
          "description": "Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.nbRatedGame.nb",
          "location": "body",
          "required": false,
          "description": "Minimum number of rated games required to join",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.allowList",
          "location": "body",
          "required": false,
          "description": "Predefined list of usernames that are allowed to join, separated by commas. If this list is non-empty, then usernames ab...",
          "type": "string",
          "default": ""
        },
        {
          "name": "conditions.bots",
          "location": "body",
          "required": false,
          "description": "Whether bots are allowed to join the tournament",
          "type": "boolean",
          "default": false
        },
        {
          "name": "conditions.accountAge",
          "location": "body",
          "required": false,
          "description": "Minium account age in days required to join",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "apiTournamentJoin": {
      "displayName": "Join an Arena tournament",
      "description": "Join an Arena tournament, possibly with a password and/or a team. Also unpauses if you had previously [paused](#operatio...",
      "method": "post",
      "endpoint": "/api/tournament/{id}/join",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "password",
          "location": "body",
          "required": false,
          "description": "The tournament password, if one is required. Can also be a [user-specific entry code](https://github.com/lichess-org/api...",
          "type": "string",
          "default": ""
        },
        {
          "name": "team",
          "location": "body",
          "required": false,
          "description": "The team to join the tournament with, for team battle tournaments",
          "type": "string",
          "default": ""
        },
        {
          "name": "pairMeAsap",
          "location": "body",
          "required": false,
          "description": "If the tournament is started, attempt to pair the user, even if they are not connected to the tournament page. This expi...",
          "type": "boolean",
          "default": false
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "apiTournamentWithdraw": {
      "displayName": "Pause or leave an Arena tournament",
      "description": "Leave a future Arena tournament, or take a break on an ongoing Arena tournament. It's possible to join again later. Poin...",
      "method": "post",
      "endpoint": "/api/tournament/{id}/withdraw",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiTournamentTerminate": {
      "displayName": "Terminate an Arena tournament",
      "description": "Terminate an Arena tournament",
      "method": "post",
      "endpoint": "/api/tournament/{id}/terminate",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiTournamentTeamBattlePost": {
      "displayName": "Update a team battle",
      "description": "Set the teams and number of leaders of a team battle. To update the other attributes of a team battle, use the [tourname...",
      "method": "post",
      "endpoint": "/api/tournament/team-battle/{id}",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "teams",
          "location": "body",
          "required": true,
          "description": "All team IDs of the team battle, separated by commas. Make sure to always send the full list. Teams that are not in the ...",
          "type": "string",
          "default": ""
        },
        {
          "name": "nbLeaders",
          "location": "body",
          "required": true,
          "description": "Number team leaders per team",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "gamesByTournament": {
      "displayName": "Export games of an Arena tournament",
      "description": "Download games of a tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format. Games are sorted...",
      "method": "get",
      "endpoint": "/api/tournament/{id}/games",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "player",
          "location": "query",
          "required": false,
          "description": "Only games of a particular player. Leave empty to fetch games of all players",
          "type": "string",
          "default": ""
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "evals",
          "location": "query",
          "required": false,
          "description": "Include analysis evaluations and comments, when available. Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eva...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "accuracy",
          "location": "query",
          "required": false,
          "description": "Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "division",
          "location": "query",
          "required": false,
          "description": "Plies which mark the beginning of the middlegame and endgame. Only available in JSON",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "resultsByTournament": {
      "displayName": "Get results of an Arena tournament",
      "description": "Players of an Arena tournament, with their score and performance, sorted by rank (best first). **Players are streamed as...",
      "method": "get",
      "endpoint": "/api/tournament/{id}/results",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "Max number of players to fetch",
          "type": "number",
          "default": 0
        },
        {
          "name": "sheet",
          "location": "query",
          "required": false,
          "description": "Add a `sheet` field to the player document. It's an expensive server computation that slows down the stream.",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "teamsByTournament": {
      "displayName": "Get team standing of a team battle",
      "description": "Teams of a team battle tournament, with top players, sorted by rank (best first).",
      "method": "get",
      "endpoint": "/api/tournament/{id}/teams",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiUserNameTournamentCreated": {
      "displayName": "Get tournaments created by a user",
      "description": "Get all tournaments created by a given user. Tournaments are sorted by reverse chronological order of start date (last s...",
      "method": "get",
      "endpoint": "/api/user/{username}/tournament/created",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "The user whose created tournaments to fetch",
          "type": "string",
          "default": ""
        },
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "Max number of tournaments to fetch",
          "type": "number",
          "default": 0
        },
        {
          "name": "status",
          "location": "query",
          "required": false,
          "description": "Include tournaments in the given status: \"Created\" (10), \"Started\" (20), \"Finished\" (30) You can add this parameter more...",
          "type": "number",
          "default": 0
        }
      ]
    },
    "apiUserNameTournamentPlayed": {
      "displayName": "Get tournaments played by a user",
      "description": "Get all tournaments played by a given user. Tournaments are sorted by reverse chronological order of start date (last pl...",
      "method": "get",
      "endpoint": "/api/user/{username}/tournament/played",
      "tags": [
        "Arena tournament"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "The user whose played tournaments to fetch",
          "type": "string",
          "default": ""
        },
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "Max number of tournaments to fetch",
          "type": "number",
          "default": 0
        },
        {
          "name": "performance",
          "location": "query",
          "required": false,
          "description": "Include the player performance rating in the response, at some cost for the server.",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "apiSwissNew": {
      "displayName": "Create a new Swiss tournament",
      "description": "Create a Swiss tournament for your team. This endpoint mirrors the Swiss tournament form from your team pagee. You can c...",
      "method": "post",
      "endpoint": "/api/swiss/new/{teamId}",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "ID of the team",
          "type": "string",
          "default": ""
        },
        {
          "name": "name",
          "location": "body",
          "required": false,
          "description": "The tournament name. Leave empty to get a random Grandmaster name",
          "type": "string",
          "default": ""
        },
        {
          "name": "clock.limit",
          "location": "body",
          "required": true,
          "description": "Clock initial time in seconds",
          "type": "number",
          "default": 0
        },
        {
          "name": "clock.increment",
          "location": "body",
          "required": true,
          "description": "Clock increment in seconds",
          "type": "number",
          "default": 0
        },
        {
          "name": "nbRounds",
          "location": "body",
          "required": true,
          "description": "Maximum number of rounds to play",
          "type": "number",
          "default": 0
        },
        {
          "name": "startsAt",
          "location": "body",
          "required": false,
          "description": "Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creat...",
          "type": "number",
          "default": 0
        },
        {
          "name": "roundInterval",
          "location": "body",
          "required": false,
          "description": "How long to wait between each round, in seconds. Set to 99999999 to manually schedule each round from the tournament UI....",
          "type": "number",
          "default": 0
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "position",
          "location": "body",
          "required": false,
          "description": "Custom initial position (in FEN). Variant must be standard and the game cannot be rated",
          "type": "string",
          "default": ""
        },
        {
          "name": "description",
          "location": "body",
          "required": false,
          "description": "Anything you want to tell players about the tournament",
          "type": "string",
          "default": ""
        },
        {
          "name": "rated",
          "location": "body",
          "required": false,
          "description": "Games are rated and impact players ratings",
          "type": "boolean",
          "default": false
        },
        {
          "name": "password",
          "location": "body",
          "required": false,
          "description": "Make the tournament private and restrict access with a password",
          "type": "string",
          "default": ""
        },
        {
          "name": "forbiddenPairings",
          "location": "body",
          "required": false,
          "description": "Usernames of players that must not play together. Two usernames per line, separated by a space",
          "type": "string",
          "default": ""
        },
        {
          "name": "manualPairings",
          "location": "body",
          "required": false,
          "description": "Manual pairings for the next round. Two usernames per line, separated by a space. Example: ``` PlayerA PlayerB PlayerC P...",
          "type": "string",
          "default": ""
        },
        {
          "name": "chatFor",
          "location": "body",
          "required": false,
          "description": "Who can read and write in the chat. - 0  = No-one - 10 = Only team leaders - 20 = Only team members - 30 = All Lichess p...",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.minRating.rating",
          "location": "body",
          "required": false,
          "description": "Minimum rating to join. Leave empty to let everyone join the tournament",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.maxRating.rating",
          "location": "body",
          "required": false,
          "description": "Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.nbRatedGame.nb",
          "location": "body",
          "required": false,
          "description": "Minimum number of rated games required to join",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.playYourGames",
          "location": "body",
          "required": false,
          "description": "Only let players join if they have played their last swiss game. If they failed to show up in a recent swiss event, they...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "conditions.allowList",
          "location": "body",
          "required": false,
          "description": "Predefined list of usernames that are allowed to join, separated by commas. If this list is non-empty, then usernames ab...",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "swiss": {
      "displayName": "Get info about a Swiss tournament",
      "description": "Get detailed info about a Swiss tournament.",
      "method": "get",
      "endpoint": "/api/swiss/{id}",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The Swiss tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiSwissUpdate": {
      "displayName": "Update a Swiss tournament",
      "description": "Update a Swiss tournament. Be mindful not to make important changes to ongoing tournaments. Additional restrictions:   -...",
      "method": "post",
      "endpoint": "/api/swiss/{id}/edit",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "name",
          "location": "body",
          "required": false,
          "description": "The tournament name. Leave empty to get a random Grandmaster name",
          "type": "string",
          "default": ""
        },
        {
          "name": "clock.limit",
          "location": "body",
          "required": true,
          "description": "Clock initial time in seconds",
          "type": "number",
          "default": 0
        },
        {
          "name": "clock.increment",
          "location": "body",
          "required": true,
          "description": "Clock increment in seconds",
          "type": "number",
          "default": 0
        },
        {
          "name": "nbRounds",
          "location": "body",
          "required": true,
          "description": "Maximum number of rounds to play",
          "type": "number",
          "default": 0
        },
        {
          "name": "startsAt",
          "location": "body",
          "required": false,
          "description": "Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creat...",
          "type": "number",
          "default": 0
        },
        {
          "name": "roundInterval",
          "location": "body",
          "required": false,
          "description": "How long to wait between each round, in seconds. Set to 99999999 to manually schedule each round from the tournament UI,...",
          "type": "number",
          "default": 0
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "position",
          "location": "body",
          "required": false,
          "description": "Custom initial position (in FEN). Variant must be standard and the game cannot be rated",
          "type": "string",
          "default": ""
        },
        {
          "name": "description",
          "location": "body",
          "required": false,
          "description": "Anything you want to tell players about the tournament",
          "type": "string",
          "default": ""
        },
        {
          "name": "rated",
          "location": "body",
          "required": false,
          "description": "Games are rated and impact players ratings",
          "type": "boolean",
          "default": false
        },
        {
          "name": "password",
          "location": "body",
          "required": false,
          "description": "Make the tournament private and restrict access with a password",
          "type": "string",
          "default": ""
        },
        {
          "name": "forbiddenPairings",
          "location": "body",
          "required": false,
          "description": "Usernames of players that must not play together. Two usernames per line, separated by a space",
          "type": "string",
          "default": ""
        },
        {
          "name": "manualPairings",
          "location": "body",
          "required": false,
          "description": "Manual pairings for the next round. Two usernames per line, separated by a space. Present players without a valid pairin...",
          "type": "string",
          "default": ""
        },
        {
          "name": "chatFor",
          "location": "body",
          "required": false,
          "description": "Who can read and write in the chat. - 0  = No-one - 10 = Only team leaders - 20 = Only team members - 30 = All Lichess p...",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.minRating.rating",
          "location": "body",
          "required": false,
          "description": "Minimum rating to join. Leave empty to let everyone join the tournament",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.maxRating.rating",
          "location": "body",
          "required": false,
          "description": "Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.nbRatedGame.nb",
          "location": "body",
          "required": false,
          "description": "Minimum number of rated games required to join",
          "type": "number",
          "default": 0
        },
        {
          "name": "conditions.playYourGames",
          "location": "body",
          "required": false,
          "description": "Only let players join if they have played their last swiss game. If they failed to show up in a recent swiss event, they...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "conditions.allowList",
          "location": "body",
          "required": false,
          "description": "Predefined list of usernames that are allowed to join, separated by commas. If this list is non-empty, then usernames ab...",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "apiSwissScheduleNextRound": {
      "displayName": "Manually schedule the next round",
      "description": "Manually schedule the next round date and time of a Swiss tournament. This sets the `roundInterval` field to `99999999`,...",
      "method": "post",
      "endpoint": "/api/swiss/{id}/schedule-next-round",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "date",
          "location": "body",
          "required": false,
          "description": "Timestamp in milliseconds to start the next round at a given date and time",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "apiSwissJoin": {
      "displayName": "Join a Swiss tournament",
      "description": "Join a Swiss tournament, possibly with a password.",
      "method": "post",
      "endpoint": "/api/swiss/{id}/join",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "password",
          "location": "body",
          "required": false,
          "description": "The tournament password, if one is required",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "apiSwissWithdraw": {
      "displayName": "Pause or leave a swiss tournament",
      "description": "Leave a future Swiss tournament, or take a break on an ongoing Swiss tournament. It's possible to join again later. Poin...",
      "method": "post",
      "endpoint": "/api/swiss/{id}/withdraw",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiSwissTerminate": {
      "displayName": "Terminate a Swiss tournament",
      "description": "Terminate a Swiss tournament",
      "method": "post",
      "endpoint": "/api/swiss/{id}/terminate",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The Swiss tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "swissTrf": {
      "displayName": "Export TRF of a Swiss tournament",
      "description": "Download a tournament in the Tournament Report File format, the FIDE standard. Documentation: <https://www.fide.com/FIDE...",
      "method": "get",
      "endpoint": "/swiss/{id}.trf",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "gamesBySwiss": {
      "displayName": "Export games of a Swiss tournament",
      "description": "Download games of a swiss tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format. Games are ...",
      "method": "get",
      "endpoint": "/api/swiss/{id}/games",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "player",
          "location": "query",
          "required": false,
          "description": "Only the games played by a given player",
          "type": "string",
          "default": ""
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "evals",
          "location": "query",
          "required": false,
          "description": "Include analysis evaluations and comments, when available. Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eva...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "accuracy",
          "location": "query",
          "required": false,
          "description": "Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "division",
          "location": "query",
          "required": false,
          "description": "Plies which mark the beginning of the middlegame and endgame. Only available in JSON",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "resultsBySwiss": {
      "displayName": "Get results of a swiss tournament",
      "description": "Players of a swiss tournament, with their score and performance, sorted by rank (best first). Players are streamed as [n...",
      "method": "get",
      "endpoint": "/api/swiss/{id}/results",
      "tags": [
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "Max number of players to fetch",
          "type": "number",
          "default": 0
        }
      ]
    },
    "apiTeamSwiss": {
      "displayName": "Get team swiss tournaments",
      "description": "Get all swiss tournaments of a team. Tournaments are sorted by reverse chronological order of start date (last starting ...",
      "method": "get",
      "endpoint": "/api/team/{teamId}/swiss",
      "tags": [
        "Team",
        "Swiss tournament"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. coders"
        },
        {
          "name": "max",
          "location": "query",
          "required": false,
          "description": "How many tournaments to download",
          "type": "number",
          "default": 100
        },
        {
          "name": "status",
          "location": "query",
          "required": false,
          "description": "[Filter] Only swiss tournaments in this current state.",
          "type": "options",
          "default": "created",
          "options": [
            "created",
            "started",
            "finished"
          ]
        },
        {
          "name": "createdBy",
          "location": "query",
          "required": false,
          "description": "[Filter] Only swiss tournaments created by a given user.",
          "type": "string",
          "default": ""
        },
        {
          "name": "name",
          "location": "query",
          "required": false,
          "description": "[Filter] Only swiss tournaments with a given name.",
          "type": "string",
          "default": ""
        }
      ]
    },
    "studyChapterPgn": {
      "displayName": "Export one study chapter",
      "description": "Download one study chapter in PGN format.",
      "method": "get",
      "endpoint": "/api/study/{studyId}/{chapterId}.pgn",
      "tags": [
        "Study"
      ],
      "params": [
        {
          "name": "studyId",
          "location": "path",
          "required": true,
          "description": "The study ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "chapterId",
          "location": "path",
          "required": true,
          "description": "The chapter ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock comments in the PGN moves, when available. Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`",
          "type": "boolean",
          "default": true
        },
        {
          "name": "comments",
          "location": "query",
          "required": false,
          "description": "Include analysis and annotator comments in the PGN moves, when available. Example: `12. Bxf6 { [%eval 0.23] } a3 { White...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "variations",
          "location": "query",
          "required": false,
          "description": "Include non-mainline moves, when available. Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... ...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "source",
          "location": "query",
          "required": false,
          "description": "Add a `Source` PGN tag with the study chapter URL. Example: `[Source \"https://lichess.org/study/4NBHImfM/1Tk4IyTz\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "orientation",
          "location": "query",
          "required": false,
          "description": "Add a `Orientation` PGN tag with the chapter predefined orientation. Example: `[Orientation \"white\"]`",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "studyAllChaptersPgn": {
      "displayName": "Export all chapters",
      "description": "Download all chapters of a study in PGN format.",
      "method": "get",
      "endpoint": "/api/study/{studyId}.pgn",
      "tags": [
        "Study"
      ],
      "params": [
        {
          "name": "studyId",
          "location": "path",
          "required": true,
          "description": "The study ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock comments in the PGN moves, when available. Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`",
          "type": "boolean",
          "default": true
        },
        {
          "name": "comments",
          "location": "query",
          "required": false,
          "description": "Include analysis and annotator comments in the PGN moves, when available. Example: `12. Bxf6 { [%eval 0.23] } a3 { White...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "variations",
          "location": "query",
          "required": false,
          "description": "Include non-mainline moves, when available. Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... ...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "source",
          "location": "query",
          "required": false,
          "description": "Add a `Source` PGN tag with the study chapter URL. Example: `[Source \"https://lichess.org/study/4NBHImfM/1Tk4IyTz\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "orientation",
          "location": "query",
          "required": false,
          "description": "Add a `Orientation` PGN tag with the chapter predefined orientation. Example: `[Orientation \"white\"]`",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "studyAllChaptersHead": {
      "displayName": "Study metadata",
      "description": "Only get the study headers, including `Last-Modified`.",
      "method": "head",
      "endpoint": "/api/study/{studyId}.pgn",
      "tags": [
        "Study"
      ],
      "params": [
        {
          "name": "studyId",
          "location": "path",
          "required": true,
          "description": "The study ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiStudyImportPGN": {
      "displayName": "Import PGN into a study",
      "description": "Imports arbitrary PGN into an existing [study](https://lichess.org/study). Creates a new chapter in the study. If the PG...",
      "method": "post",
      "endpoint": "/api/study/{studyId}/import-pgn",
      "tags": [
        "Study"
      ],
      "params": [
        {
          "name": "studyId",
          "location": "path",
          "required": true,
          "description": "ID of the study",
          "type": "string",
          "default": ""
        },
        {
          "name": "pgn",
          "location": "body",
          "required": true,
          "description": "PGN to import. Can contain multiple games separated by 2 or more newlines",
          "type": "string",
          "default": ""
        },
        {
          "name": "name",
          "location": "body",
          "required": false,
          "description": "Name of the new chapter. If not specified, or if multiple chapters are created, the names will be inferred from the PGN ...",
          "type": "string",
          "default": ""
        },
        {
          "name": "orientation",
          "location": "body",
          "required": false,
          "description": "Default board orientation",
          "type": "string",
          "default": ""
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "studyExportAllPgn": {
      "displayName": "Export all studies of a user",
      "description": "Download all chapters of all studies of a user in PGN format. If authenticated, then all public, unlisted, and private s...",
      "method": "get",
      "endpoint": "/study/by/{username}/export.pgn",
      "tags": [
        "Study"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "The user whose studies we export",
          "type": "string",
          "default": ""
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock comments in the PGN moves, when available. Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`",
          "type": "boolean",
          "default": true
        },
        {
          "name": "comments",
          "location": "query",
          "required": false,
          "description": "Include analysis and annotator comments in the PGN moves, when available. Example: `12. Bxf6 { [%eval 0.23] } a3 { White...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "variations",
          "location": "query",
          "required": false,
          "description": "Include non-mainline moves, when available. Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... ...",
          "type": "boolean",
          "default": true
        },
        {
          "name": "source",
          "location": "query",
          "required": false,
          "description": "Add a `Source` PGN tag with the study chapter URL. Example: `[Source \"https://lichess.org/study/4NBHImfM/1Tk4IyTz\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "orientation",
          "location": "query",
          "required": false,
          "description": "Add a `Orientation` PGN tag with the chapter predefined orientation. Example: `[Orientation \"white\"]`",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "studyListMetadata": {
      "displayName": "List studies of a user",
      "description": "Get metadata (name and dates) of all studies of a user. If authenticated, then all public, unlisted, and private studies...",
      "method": "get",
      "endpoint": "/api/study/by/{username}",
      "tags": [
        "Study"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "The user whose studies we list",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiStudyStudyIdChapterIdDelete": {
      "displayName": "Delete a study chapter",
      "description": "Delete a chapter of a study you own. This is definitive. A study must have at least one chapter; so if you delete the la...",
      "method": "delete",
      "endpoint": "/api/study/{studyId}/{chapterId}",
      "tags": [
        "Study"
      ],
      "params": [
        {
          "name": "studyId",
          "location": "path",
          "required": true,
          "description": "The study ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "chapterId",
          "location": "path",
          "required": true,
          "description": "The chapter ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "broadcastsOfficial": {
      "displayName": "Get official broadcasts",
      "description": "Get all incoming, ongoing, and finished official broadcasts. The broadcasts are sorted by start date, most recent first....",
      "method": "get",
      "endpoint": "/api/broadcast",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "Max number of broadcasts to fetch",
          "type": "number",
          "default": 20
        },
        {
          "name": "html",
          "location": "query",
          "required": false,
          "description": "Convert the \"description\" field from markdown to HTML",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "broadcastsTop": {
      "displayName": "Get paginated top broadcast previews",
      "description": "The same data, in the same order, as can be seen on [https://lichess.org/broadcast](/broadcast).",
      "method": "get",
      "endpoint": "/api/broadcast/top",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "page",
          "location": "query",
          "required": false,
          "description": "Which page to fetch. Only page 1 has \"active\" broadcasts",
          "type": "number",
          "default": 1
        },
        {
          "name": "html",
          "location": "query",
          "required": false,
          "description": "Convert the \"description\" field from markdown to HTML",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "broadcastsByUser": {
      "displayName": "Get broadcasts created by a user",
      "description": "Get all incoming, ongoing, and finished official broadcasts. The broadcasts are sorted by created date, most recent firs...",
      "method": "get",
      "endpoint": "/api/broadcast/by/{username}",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "page",
          "location": "query",
          "required": false,
          "description": "",
          "type": "number",
          "default": 1
        },
        {
          "name": "html",
          "location": "query",
          "required": false,
          "description": "Convert the \"description\" field from markdown to HTML",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "broadcastTourCreate": {
      "displayName": "Create a broadcast tournament",
      "description": "Create a new broadcast tournament to relay external games. This endpoint accepts the same form data as the [web form](ht...",
      "method": "post",
      "endpoint": "/broadcast/new",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "name",
          "location": "body",
          "required": true,
          "description": "Name of the broadcast tournament.  Example: `Sinquefield Cup`",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.format",
          "location": "body",
          "required": false,
          "description": "Tournament format. Example: `\"8-player round-robin\" or \"5-round Swiss\"`",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.location",
          "location": "body",
          "required": false,
          "description": "Tournament Location",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.tc",
          "location": "body",
          "required": false,
          "description": "Time control. Example: `\"Classical\" or \"Rapid\" or \"Rapid & Blitz\"`",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.fideTc",
          "location": "body",
          "required": false,
          "description": "FIDE rating category. Which FIDE ratings to use",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.timeZone",
          "location": "body",
          "required": false,
          "description": "Timezone of the tournament. Example: `America/New_York`. See [list of possible timezone identifiers](https://en.wikipedi...",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.players",
          "location": "body",
          "required": false,
          "description": "Mention up to 4 of the best players participating",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.website",
          "location": "body",
          "required": false,
          "description": "Official website. External website URL",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.standings",
          "location": "body",
          "required": false,
          "description": "Official Standings. External website URL, e.g. chess-results.com, info64.org",
          "type": "string",
          "default": ""
        },
        {
          "name": "markdown",
          "location": "body",
          "required": false,
          "description": "Optional long description of the broadcast. Markdown is supported",
          "type": "string",
          "default": ""
        },
        {
          "name": "showScores",
          "location": "body",
          "required": false,
          "description": "Show players scores based on game results",
          "type": "boolean",
          "default": false
        },
        {
          "name": "showRatingDiffs",
          "location": "body",
          "required": false,
          "description": "Show player's rating diffs",
          "type": "boolean",
          "default": false
        },
        {
          "name": "teamTable",
          "location": "body",
          "required": false,
          "description": "Show a team leaderboard. Requires WhiteTeam and BlackTeam PGN tags",
          "type": "boolean",
          "default": false
        },
        {
          "name": "players",
          "location": "body",
          "required": false,
          "description": "Optional replace player names, ratings and titles.  One line per player, formatted as such:  ```txt player name = FIDE I...",
          "type": "string",
          "default": ""
        },
        {
          "name": "teams",
          "location": "body",
          "required": false,
          "description": "Optional: assign players to teams  One line per player, formatted as such: ```txt Team name; Fide Id or Player name ``` ...",
          "type": "string",
          "default": ""
        },
        {
          "name": "tier",
          "location": "body",
          "required": false,
          "description": "Optional, for Lichess admins only, used to feature on /broadcast.  * `3` for Official: normal tier * `4` for Official: h...",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "broadcastTourGet": {
      "displayName": "Get a broadcast tournament",
      "description": "Get information about a broadcast tournament.",
      "method": "get",
      "endpoint": "/api/broadcast/{broadcastTournamentId}",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastTournamentId",
          "location": "path",
          "required": true,
          "description": "The broadcast tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "broadcastPlayersGet": {
      "displayName": "Get players of a broadcast",
      "description": "Get the list of players of a broadcast tournament, if available.",
      "method": "get",
      "endpoint": "/broadcast/{broadcastTournamentId}/players",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastTournamentId",
          "location": "path",
          "required": true,
          "description": "The broadcast tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "broadcastTourUpdate": {
      "displayName": "Update your broadcast tournament",
      "description": "Update information about a broadcast tournament that you created. This endpoint accepts the same form data as the web fo...",
      "method": "post",
      "endpoint": "/broadcast/{broadcastTournamentId}/edit",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastTournamentId",
          "location": "path",
          "required": true,
          "description": "The broadcast ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "name",
          "location": "body",
          "required": true,
          "description": "Name of the broadcast tournament.  Example: `Sinquefield Cup`",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.format",
          "location": "body",
          "required": false,
          "description": "Tournament format. Example: `\"8-player round-robin\" or \"5-round Swiss\"`",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.location",
          "location": "body",
          "required": false,
          "description": "Tournament Location",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.tc",
          "location": "body",
          "required": false,
          "description": "Time control. Example: `\"Classical\" or \"Rapid\" or \"Rapid & Blitz\"`",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.fideTc",
          "location": "body",
          "required": false,
          "description": "FIDE rating category. Which FIDE ratings to use",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.timeZone",
          "location": "body",
          "required": false,
          "description": "Timezone of the tournament. Example: `America/New_York`. See [list of possible timezone identifiers](https://en.wikipedi...",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.players",
          "location": "body",
          "required": false,
          "description": "Mention up to 4 of the best players participating",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.website",
          "location": "body",
          "required": false,
          "description": "Official website. External website URL",
          "type": "string",
          "default": ""
        },
        {
          "name": "info.standings",
          "location": "body",
          "required": false,
          "description": "Official Standings. External website URL, e.g. chess-results.com, info64.org",
          "type": "string",
          "default": ""
        },
        {
          "name": "markdown",
          "location": "body",
          "required": false,
          "description": "Optional long description of the broadcast. Markdown is supported",
          "type": "string",
          "default": ""
        },
        {
          "name": "showScores",
          "location": "body",
          "required": false,
          "description": "Show players scores based on game results",
          "type": "boolean",
          "default": false
        },
        {
          "name": "showRatingDiffs",
          "location": "body",
          "required": false,
          "description": "Show player's rating diffs",
          "type": "boolean",
          "default": false
        },
        {
          "name": "teamTable",
          "location": "body",
          "required": false,
          "description": "Show a team leaderboard. Requires WhiteTeam and BlackTeam PGN tags",
          "type": "boolean",
          "default": false
        },
        {
          "name": "players",
          "location": "body",
          "required": false,
          "description": "Optional replace player names, ratings and titles.  One line per player, formatted as such:  ```txt player name = FIDE I...",
          "type": "string",
          "default": ""
        },
        {
          "name": "teams",
          "location": "body",
          "required": false,
          "description": "Optional: assign players to teams  One line per player, formatted as such: ```txt Team name; Fide Id or Player name ``` ...",
          "type": "string",
          "default": ""
        },
        {
          "name": "tier",
          "location": "body",
          "required": false,
          "description": "Optional, for Lichess admins only, used to feature on /broadcast.  * `3` for Official: normal tier * `4` for Official: h...",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "broadcastRoundCreate": {
      "displayName": "Create a broadcast round",
      "description": "Create a new broadcast round to relay external games. This endpoint accepts the same form data as the web form.  Choose ...",
      "method": "post",
      "endpoint": "/broadcast/{broadcastTournamentId}/new",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastTournamentId",
          "location": "path",
          "required": true,
          "description": "The broadcast tournament ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "startsAt",
          "location": "body",
          "required": false,
          "description": "Timestamp in milliseconds of broadcast round start. Leave empty to manually start the broadcast round. Example: `1356998...",
          "type": "number",
          "default": 0
        },
        {
          "name": "startsAfterPrevious",
          "location": "body",
          "required": false,
          "description": "The start date is unknown, and the round will start automatically when the previous round completes",
          "type": "boolean",
          "default": false
        },
        {
          "name": "delay",
          "location": "body",
          "required": false,
          "description": "Delay in seconds for movements to appear on the broadcast. Leave it empty if you don't need it. Example: `900` (15 min)",
          "type": "number",
          "default": 0
        },
        {
          "name": "status",
          "location": "body",
          "required": false,
          "description": "Lichess can usually detect the round status, but you can also set it manually if needed",
          "type": "string",
          "default": ""
        },
        {
          "name": "period",
          "location": "body",
          "required": false,
          "description": "(Only for Admins) Waiting time for each poll",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "broadcastRoundGet": {
      "displayName": "Get a broadcast round",
      "description": "Get information about a broadcast round.",
      "method": "get",
      "endpoint": "/api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastTournamentSlug",
          "location": "path",
          "required": true,
          "description": "The broadcast tournament slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastRoundId` is...",
          "type": "string",
          "default": ""
        },
        {
          "name": "broadcastRoundSlug",
          "location": "path",
          "required": true,
          "description": "The broadcast round slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastRoundId` is actu...",
          "type": "string",
          "default": ""
        },
        {
          "name": "broadcastRoundId",
          "location": "path",
          "required": true,
          "description": "The broadcast Round ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "broadcastRoundUpdate": {
      "displayName": "Update a broadcast round",
      "description": "Update information about a broadcast round. This endpoint accepts the same form data as the web form. All fields must be...",
      "method": "post",
      "endpoint": "/broadcast/round/{broadcastRoundId}/edit",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastRoundId",
          "location": "path",
          "required": true,
          "description": "The broadcast round ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "startsAt",
          "location": "body",
          "required": false,
          "description": "Timestamp in milliseconds of broadcast round start. Leave empty to manually start the broadcast round. Example: `1356998...",
          "type": "number",
          "default": 0
        },
        {
          "name": "startsAfterPrevious",
          "location": "body",
          "required": false,
          "description": "The start date is unknown, and the round will start automatically when the previous round completes",
          "type": "boolean",
          "default": false
        },
        {
          "name": "delay",
          "location": "body",
          "required": false,
          "description": "Delay in seconds for movements to appear on the broadcast. Leave it empty if you don't need it. Example: `900` (15 min)",
          "type": "number",
          "default": 0
        },
        {
          "name": "status",
          "location": "body",
          "required": false,
          "description": "Lichess can usually detect the round status, but you can also set it manually if needed",
          "type": "string",
          "default": ""
        },
        {
          "name": "period",
          "location": "body",
          "required": false,
          "description": "(Only for Admins) Waiting time for each poll",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "broadcastRoundReset": {
      "displayName": "Reset a broadcast round",
      "description": "Remove any games from the broadcast round and reset it to its initial state.",
      "method": "post",
      "endpoint": "/api/broadcast/round/{broadcastRoundId}/reset",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastRoundId",
          "location": "path",
          "required": true,
          "description": "The broadcast round ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "broadcastPush": {
      "displayName": "Push PGN to a broadcast round",
      "description": "Update a broadcast with new PGN. Only for broadcasts without a source URL.",
      "method": "post",
      "endpoint": "/api/broadcast/round/{broadcastRoundId}/push",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastRoundId",
          "location": "path",
          "required": true,
          "description": "The broadcast round ID",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "type": "string",
          "default": "",
          "description": "The PGN. It can contain up to 64 games, separated by a double new line"
        }
      ],
      "headers": {
        "Content-Type": "text/plain"
      }
    },
    "broadcastStreamRoundPgn": {
      "displayName": "Stream an ongoing broadcast tournament as PGN",
      "description": "This streaming endpoint first sends all games of a broadcast tournament in PGN format. Then, it waits for new moves to b...",
      "method": "get",
      "endpoint": "/api/stream/broadcast/round/{broadcastRoundId}.pgn",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastRoundId",
          "location": "path",
          "required": true,
          "description": "The broadcast round ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "broadcastRoundPgn": {
      "displayName": "Export one round as PGN",
      "description": "Download all games of a single round of a broadcast tournament in PGN format. You *could* poll this endpoint to get upda...",
      "method": "get",
      "endpoint": "/api/broadcast/round/{broadcastRoundId}.pgn",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastRoundId",
          "location": "path",
          "required": true,
          "description": "The round ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "broadcastAllRoundsPgn": {
      "displayName": "Export all rounds as PGN",
      "description": "Download all games of all rounds of a broadcast in PGN format. If a `study:read` [OAuth token](#tag/OAuth) is provided, ...",
      "method": "get",
      "endpoint": "/api/broadcast/{broadcastTournamentId}.pgn",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "broadcastTournamentId",
          "location": "path",
          "required": true,
          "description": "The broadcast tournament ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "broadcastMyRoundsGet": {
      "displayName": "Get your broadcast rounds",
      "description": "Stream all broadcast rounds you are a member of. Also includes broadcasts rounds you did not create, but were invited to...",
      "method": "get",
      "endpoint": "/api/broadcast/my-rounds",
      "tags": [
        "Broadcast"
      ],
      "params": [
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "How many rounds to get",
          "type": "number",
          "default": 0
        }
      ]
    },
    "fidePlayerGet": {
      "displayName": "Get a FIDE player",
      "description": "Get information about a FIDE player.",
      "method": "get",
      "endpoint": "/api/fide/player/{playerId}",
      "tags": [
        "FIDE"
      ],
      "params": [
        {
          "name": "playerId",
          "location": "path",
          "required": true,
          "description": "The FIDE player ID",
          "type": "number",
          "default": 0
        }
      ]
    },
    "fidePlayerSearch": {
      "displayName": "Search FIDE players",
      "description": "List of FIDE players search results for a query.",
      "method": "get",
      "endpoint": "/api/fide/player",
      "tags": [
        "FIDE"
      ],
      "params": [
        {
          "name": "q",
          "location": "query",
          "required": true,
          "description": "The search query",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiSimul": {
      "displayName": "Get current simuls",
      "description": "Get recently created, started, finished, simuls. Created and finished simul lists are not exhaustives, only those with s...",
      "method": "get",
      "endpoint": "/api/simul",
      "tags": [
        "Simul"
      ],
      "params": []
    },
    "teamShow": {
      "displayName": "Get a single team",
      "description": "Public info about a team. Includes the list of publicly visible leaders",
      "method": "get",
      "endpoint": "/api/team/{teamId}",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "teamAll": {
      "displayName": "Get popular teams",
      "description": "Paginator of the most popular teams.",
      "method": "get",
      "endpoint": "/api/team/all",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "page",
          "location": "query",
          "required": false,
          "description": "",
          "type": "number",
          "default": 1
        }
      ]
    },
    "teamOfUsername": {
      "displayName": "Teams of a player",
      "description": "All the teams a player is a member of.",
      "method": "get",
      "endpoint": "/api/team/of/{username}",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "teamSearch": {
      "displayName": "Search teams",
      "description": "Paginator of team search results for a keyword.",
      "method": "get",
      "endpoint": "/api/team/search",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "text",
          "location": "query",
          "required": false,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "page",
          "location": "query",
          "required": false,
          "description": "",
          "type": "number",
          "default": 1
        }
      ]
    },
    "teamIdUsers": {
      "displayName": "Get members of a team",
      "description": "Members are sorted by reverse chronological order of joining the team (most recent first). OAuth is only required if the...",
      "method": "get",
      "endpoint": "/api/team/{teamId}/users",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "full",
          "location": "query",
          "required": false,
          "description": "Full user documents with performance ratings. This limits the response to 1,000 users.",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "apiTeamArena": {
      "displayName": "Get team Arena tournaments",
      "description": "Get all Arena tournaments relevant to a team. Tournaments are sorted by reverse chronological order of start date (last ...",
      "method": "get",
      "endpoint": "/api/team/{teamId}/arena",
      "tags": [
        "Team",
        "Arena tournament"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "ID of the team",
          "type": "string",
          "default": ""
        },
        {
          "name": "max",
          "location": "query",
          "required": false,
          "description": "How many tournaments to download",
          "type": "number",
          "default": 100
        }
      ]
    },
    "teamIdJoin": {
      "displayName": "Join a team",
      "description": "Join a team. If the team requires a password but the `password` field is incorrect, then the call fails with `403 Forbid...",
      "method": "post",
      "endpoint": "/team/{teamId}/join",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "message",
          "location": "body",
          "required": false,
          "description": "Required if team manually reviews admission requests",
          "type": "string",
          "default": ""
        },
        {
          "name": "password",
          "location": "body",
          "required": false,
          "description": "Optional password, if the team requires one",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "teamIdQuit": {
      "displayName": "Leave a team",
      "description": "Leave a team. - <https://lichess.org/team>",
      "method": "post",
      "endpoint": "/team/{teamId}/quit",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "teamRequests": {
      "displayName": "Get join requests",
      "description": "Get pending join requests of your team",
      "method": "get",
      "endpoint": "/api/team/{teamId}/requests",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "declined",
          "location": "query",
          "required": false,
          "description": "Get the declined join requests",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "teamRequestAccept": {
      "displayName": "Accept join request",
      "description": "Accept someone's request to join your team",
      "method": "post",
      "endpoint": "/api/team/{teamId}/request/{userId}/accept",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "userId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "teamRequestDecline": {
      "displayName": "Decline join request",
      "description": "Decline someone's request to join your team",
      "method": "post",
      "endpoint": "/api/team/{teamId}/request/{userId}/decline",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "userId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "teamIdKickUserId": {
      "displayName": "Kick a user from your team",
      "description": "Kick a member out of one of your teams. - <https://lichess.org/team>",
      "method": "post",
      "endpoint": "/api/team/{teamId}/kick/{userId}",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "userId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "teamIdPmAll": {
      "displayName": "Message all members",
      "description": "Send a private message to all members of a team. You must be a team leader with the \"Messages\" permission.",
      "method": "post",
      "endpoint": "/team/{teamId}/pm-all",
      "tags": [
        "Team"
      ],
      "params": [
        {
          "name": "teamId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "message",
          "location": "body",
          "required": false,
          "description": "The message to send to all your team members",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "streamerLive": {
      "displayName": "Get live streamers",
      "description": "Get basic info about currently streaming users. This API is very fast and cheap on lichess side. So you can call it quit...",
      "method": "get",
      "endpoint": "/api/streamer/live",
      "tags": [
        "User"
      ],
      "params": []
    },
    "apiCrosstable": {
      "displayName": "Get crosstable",
      "description": "Get total number of games, and current score, of any two users. If the `matchup` flag is provided, and the users are cur...",
      "method": "get",
      "endpoint": "/api/crosstable/{user1}/{user2}",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "user1",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "user2",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "matchup",
          "location": "query",
          "required": false,
          "description": "Whether to get the current match data, if any",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "apiPlayerAutocomplete": {
      "displayName": "Autocomplete usernames",
      "description": "Provides autocompletion options for an incomplete username.",
      "method": "get",
      "endpoint": "/api/player/autocomplete",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "term",
          "location": "query",
          "required": true,
          "description": "The beginning of a username",
          "type": "string",
          "default": ""
        },
        {
          "name": "object",
          "location": "query",
          "required": false,
          "description": "- `false` returns an array of usernames - `true` returns an object with matching users",
          "type": "boolean",
          "default": false
        },
        {
          "name": "friend",
          "location": "query",
          "required": false,
          "description": "Returns followed players matching `term` if any, else returns other players. Requires [OAuth](#tag/OAuth).",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "writeNote": {
      "displayName": "Add a note for a user",
      "description": "Add a private note available only to you about this account.",
      "method": "post",
      "endpoint": "/api/user/{username}/note",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "description": "The contents of the note",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "readNote": {
      "displayName": "Get notes for a user",
      "description": "Get the private notes that you have added for a user.",
      "method": "get",
      "endpoint": "/api/user/{username}/note",
      "tags": [
        "User"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiUserFollowing": {
      "displayName": "Get users followed by the logged in user",
      "description": "Users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).",
      "method": "get",
      "endpoint": "/api/rel/following",
      "tags": [
        "Relation"
      ],
      "params": []
    },
    "followUser": {
      "displayName": "Follow a player",
      "description": "Follow a player, adding them to your list of Lichess friends.",
      "method": "post",
      "endpoint": "/api/rel/follow/{username}",
      "tags": [
        "Relation"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "unfollowUser": {
      "displayName": "Unfollow a player",
      "description": "Unfollow a player, removing them from your list of Lichess friends.",
      "method": "post",
      "endpoint": "/api/rel/unfollow/{username}",
      "tags": [
        "Relation"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "blockUser": {
      "displayName": "Block a player",
      "description": "Block a player, adding them to your list of blocked Lichess users.",
      "method": "post",
      "endpoint": "/api/rel/block/{username}",
      "tags": [
        "Relation"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "unblockUser": {
      "displayName": "Unblock a player",
      "description": "Unblock a player, removing them from your list of blocked Lichess users.",
      "method": "post",
      "endpoint": "/api/rel/unblock/{username}",
      "tags": [
        "Relation"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiStreamEvent": {
      "displayName": "Stream incoming events",
      "description": "Stream the events reaching a lichess user in real time as [ndjson](#section/Introduction/Streaming-with-ND-JSON).  An em...",
      "method": "get",
      "endpoint": "/api/stream/event",
      "tags": [
        "Board",
        "Bot"
      ],
      "params": []
    },
    "apiBoardSeek": {
      "displayName": "Create a seek",
      "description": "Create a public seek, to start a game with a random player.  ### Real-time seek  Specify the `time` and `increment` cloc...",
      "method": "post",
      "endpoint": "/api/board/seek",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "rated",
          "location": "body",
          "required": false,
          "description": "Whether the game is rated and impacts players ratings",
          "type": "boolean",
          "default": false
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "ratingRange",
          "location": "body",
          "required": false,
          "description": "The rating range of potential opponents. Better left empty. Example: 1500-1800",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "boardGameStream": {
      "displayName": "Stream Board game state",
      "description": "Stream the state of a game being played with the Board API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).  ...",
      "method": "get",
      "endpoint": "/api/board/game/stream/{gameId}",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "boardGameMove": {
      "displayName": "Make a Board move",
      "description": "Make a move in a game being played with the Board API. The move can also contain a draw offer/agreement.",
      "method": "post",
      "endpoint": "/api/board/game/{gameId}/move/{move}",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "move",
          "location": "path",
          "required": true,
          "description": "The move to play, in UCI format",
          "type": "string",
          "default": ""
        },
        {
          "name": "offeringDraw",
          "location": "query",
          "required": false,
          "description": "Whether to offer (or agree to) a draw",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "boardGameChatPost": {
      "displayName": "Write in the chat",
      "description": "Post a message to the player or spectator chat, in a game being played with the Board API.",
      "method": "post",
      "endpoint": "/api/board/game/{gameId}/chat",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "room",
          "location": "body",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Thank you for the game!"
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "boardGameChatGet": {
      "displayName": "Fetch the game chat",
      "description": "Get the messages posted in the game chat",
      "method": "get",
      "endpoint": "/api/board/game/{gameId}/chat",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "boardGameAbort": {
      "displayName": "Abort a game",
      "description": "Abort a game being played with the Board API.",
      "method": "post",
      "endpoint": "/api/board/game/{gameId}/abort",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "boardGameResign": {
      "displayName": "Resign a game",
      "description": "Resign a game being played with the Board API.",
      "method": "post",
      "endpoint": "/api/board/game/{gameId}/resign",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "boardGameDraw": {
      "displayName": "Handle draw offers",
      "description": "Create/accept/decline draw offers. - `yes`: Offer a draw, or accept the opponent's draw offer. - `no`: Decline a draw of...",
      "method": "post",
      "endpoint": "/api/board/game/{gameId}/draw/{accept}",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "accept",
          "location": "path",
          "required": true,
          "description": "",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "boardGameTakeback": {
      "displayName": "Handle takeback offers",
      "description": "Create/accept/decline takebacks. - `yes`: Propose a takeback, or accept the opponent's takeback offer. - `no`: Decline a...",
      "method": "post",
      "endpoint": "/api/board/game/{gameId}/takeback/{accept}",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "accept",
          "location": "path",
          "required": true,
          "description": "",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "boardGameClaimVictory": {
      "displayName": "Claim victory of a game",
      "description": "Claim victory when the opponent has left the game for a while.",
      "method": "post",
      "endpoint": "/api/board/game/{gameId}/claim-victory",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "boardGameBerserk": {
      "displayName": "Berserk a tournament game",
      "description": "Go berserk on an arena tournament game. Halves the clock time, grants an extra point upon winning. Only available in are...",
      "method": "post",
      "endpoint": "/api/board/game/{gameId}/berserk",
      "tags": [
        "Board"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiBotOnline": {
      "displayName": "Get online bots",
      "description": "Stream the [online bot users](https://lichess.org/player/bots), as [ndjson](#section/Introduction/Streaming-with-ND-JSON...",
      "method": "get",
      "endpoint": "/api/bot/online",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "nb",
          "location": "query",
          "required": false,
          "description": "How many bot users to fetch",
          "type": "number",
          "default": 0
        }
      ]
    },
    "botAccountUpgrade": {
      "displayName": "Upgrade to Bot account",
      "description": "Upgrade a lichess player account into a Bot account. Only Bot accounts can use the Bot API. The account **cannot have pl...",
      "method": "post",
      "endpoint": "/api/bot/account/upgrade",
      "tags": [
        "Bot"
      ],
      "params": []
    },
    "botGameStream": {
      "displayName": "Stream Bot game state",
      "description": "Stream the state of a game being played with the Bot API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON). Use...",
      "method": "get",
      "endpoint": "/api/bot/game/stream/{gameId}",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "botGameMove": {
      "displayName": "Make a Bot move",
      "description": "Make a move in a game being played with the Bot API. The move can also contain a draw offer/agreement.",
      "method": "post",
      "endpoint": "/api/bot/game/{gameId}/move/{move}",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "move",
          "location": "path",
          "required": true,
          "description": "The move to play, in UCI format",
          "type": "string",
          "default": ""
        },
        {
          "name": "offeringDraw",
          "location": "query",
          "required": false,
          "description": "Whether to offer (or agree to) a draw",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "botGameChat": {
      "displayName": "Write in the chat",
      "description": "Post a message to the player or spectator chat, in a game being played with the Bot API.",
      "method": "post",
      "endpoint": "/api/bot/game/{gameId}/chat",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "room",
          "location": "body",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Thank you for the game!"
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "botGameChatGet": {
      "displayName": "Fetch the game chat",
      "description": "Get the messages posted in the game chat",
      "method": "get",
      "endpoint": "/api/bot/game/{gameId}/chat",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "botGameAbort": {
      "displayName": "Abort a game",
      "description": "Abort a game being played with the Bot API.",
      "method": "post",
      "endpoint": "/api/bot/game/{gameId}/abort",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "botGameResign": {
      "displayName": "Resign a game",
      "description": "Resign a game being played with the Bot API.",
      "method": "post",
      "endpoint": "/api/bot/game/{gameId}/resign",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "botGameDraw": {
      "displayName": "Handle draw offers",
      "description": "Create/accept/decline draw offers with the Bot API. - `yes`: Offer a draw, or accept the opponent's draw offer. - `no`: ...",
      "method": "post",
      "endpoint": "/api/bot/game/{gameId}/draw/{accept}",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "accept",
          "location": "path",
          "required": true,
          "description": "",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "botGameTakeback": {
      "displayName": "Handle takeback offers",
      "description": "Create/accept/decline takebacks with the Bot API. - `yes`: Propose a takeback, or accept the opponent's takeback offer. ...",
      "method": "post",
      "endpoint": "/api/bot/game/{gameId}/takeback/{accept}",
      "tags": [
        "Bot"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "accept",
          "location": "path",
          "required": true,
          "description": "",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "challengeList": {
      "displayName": "List your challenges",
      "description": "Get a list of challenges created by or targeted at you.",
      "method": "get",
      "endpoint": "/api/challenge",
      "tags": [
        "Challenge"
      ],
      "params": []
    },
    "challengeCreate": {
      "displayName": "Create a challenge",
      "description": "Challenge someone to play. The targeted player can choose to accept or decline. If the challenge is accepted, you will b...",
      "method": "post",
      "endpoint": "/api/challenge/{username}",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "rated",
          "location": "body",
          "required": false,
          "description": "Game is rated and impacts players ratings",
          "type": "boolean",
          "default": false
        },
        {
          "name": "clock.limit",
          "location": "body",
          "required": false,
          "description": "Clock initial time in seconds. If empty, a correspondence game is created. Valid values are 0, 15, 30, 45, 60, 90, and a...",
          "type": "number",
          "default": 0
        },
        {
          "name": "clock.increment",
          "location": "body",
          "required": false,
          "description": "Clock increment in seconds. If empty, a correspondence game is created",
          "type": "number",
          "default": 0
        },
        {
          "name": "days",
          "location": "body",
          "required": false,
          "description": "Days per move, for correspondence games. Clock settings must be omitted",
          "type": "number",
          "default": 0
        },
        {
          "name": "color",
          "location": "body",
          "required": false,
          "description": "Which color you get to play",
          "type": "string",
          "default": ""
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "fen",
          "location": "body",
          "required": false,
          "description": "Custom initial position (in FEN). Variant must be standard, fromPosition, or chess960 (if a valid 960 starting position)...",
          "type": "string",
          "default": ""
        },
        {
          "name": "keepAliveStream",
          "location": "body",
          "required": false,
          "description": "If set, the response is streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON). The challenge is kept alive ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "rules",
          "location": "body",
          "required": false,
          "description": "Extra game rules separated by commas. Example: `noAbort,noRematch`",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "challengeShow": {
      "displayName": "Show one challenge",
      "description": "Get details about a challenge, even if it has been recently accepted, canceled or declined.",
      "method": "get",
      "endpoint": "/api/challenge/{challengeId}/show",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "challengeId",
          "location": "path",
          "required": true,
          "description": "The challenge ID",
          "type": "string",
          "default": ""
        }
      ]
    },
    "challengeAccept": {
      "displayName": "Accept a challenge",
      "description": "Accept an incoming challenge. You should receive a `gameStart` event on the [incoming events stream](#operation/apiStrea...",
      "method": "post",
      "endpoint": "/api/challenge/{challengeId}/accept",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "challengeId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "challengeDecline": {
      "displayName": "Decline a challenge",
      "description": "Decline an incoming challenge.",
      "method": "post",
      "endpoint": "/api/challenge/{challengeId}/decline",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "challengeId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "reason",
          "location": "body",
          "required": false,
          "description": "Reason challenge was declined. It will be translated to the player's language. See [the full list in the translation fil...",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "challengeCancel": {
      "displayName": "Cancel a challenge",
      "description": "Cancel a challenge you sent, or aborts the game if the challenge was accepted, but the game was not yet played. Note tha...",
      "method": "post",
      "endpoint": "/api/challenge/{challengeId}/cancel",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "challengeId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "opponentToken",
          "location": "query",
          "required": false,
          "description": "Optional `challenge:write` token of the opponent. If set, the game can be canceled even if both players have moved",
          "type": "string",
          "default": ""
        }
      ]
    },
    "challengeAi": {
      "displayName": "Challenge the AI",
      "description": "Start a game with Lichess AI. You will be notified on the [event stream](#operation/apiStreamEvent) that a new game has ...",
      "method": "post",
      "endpoint": "/api/challenge/ai",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "level",
          "location": "body",
          "required": false,
          "description": "AI strength",
          "type": "number",
          "default": 0
        },
        {
          "name": "clock.limit",
          "location": "body",
          "required": false,
          "description": "Clock initial time in seconds. If empty, a correspondence game is created",
          "type": "number",
          "default": 0
        },
        {
          "name": "clock.increment",
          "location": "body",
          "required": false,
          "description": "Clock increment in seconds. If empty, a correspondence game is created",
          "type": "number",
          "default": 0
        },
        {
          "name": "days",
          "location": "body",
          "required": false,
          "description": "Days per move, for correspondence games. Clock settings must be omitted",
          "type": "number",
          "default": 0
        },
        {
          "name": "color",
          "location": "body",
          "required": false,
          "description": "Which color you get to play",
          "type": "string",
          "default": ""
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "fen",
          "location": "body",
          "required": false,
          "description": "Custom initial position (in FEN). Variant must be standard, fromPosition, or chess960 (if a valid 960 starting position)...",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "challengeOpen": {
      "displayName": "Open-ended challenge",
      "description": "Create a challenge that any 2 players can join. Share the URL of the challenge. the first 2 players to click it will be ...",
      "method": "post",
      "endpoint": "/api/challenge/open",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "rated",
          "location": "body",
          "required": false,
          "description": "Game is rated and impacts players ratings",
          "type": "boolean",
          "default": false
        },
        {
          "name": "clock.limit",
          "location": "body",
          "required": false,
          "description": "Clock initial time in seconds. If empty, a correspondence game is created",
          "type": "number",
          "default": 0
        },
        {
          "name": "clock.increment",
          "location": "body",
          "required": false,
          "description": "Clock increment in seconds. If empty, a correspondence game is created",
          "type": "number",
          "default": 0
        },
        {
          "name": "days",
          "location": "body",
          "required": false,
          "description": "Days per turn. For correspondence challenges",
          "type": "number",
          "default": 0
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "fen",
          "location": "body",
          "required": false,
          "description": "Custom initial position (in FEN). Variant must be standard, fromPosition, or chess960 (if a valid 960 starting position)...",
          "type": "string",
          "default": ""
        },
        {
          "name": "name",
          "location": "body",
          "required": false,
          "description": "Optional name for the challenge, that players will see on the challenge page",
          "type": "string",
          "default": ""
        },
        {
          "name": "rules",
          "location": "body",
          "required": false,
          "description": "Extra game rules separated by commas. Example: `noRematch,noGiveTime` The `noAbort` rule is available for Lichess admins...",
          "type": "string",
          "default": ""
        },
        {
          "name": "users",
          "location": "body",
          "required": false,
          "description": "Optional pair of usernames, separated by a comma. If set, only these users will be allowed to join the game. The first u...",
          "type": "string",
          "default": ""
        },
        {
          "name": "expiresAt",
          "location": "body",
          "required": false,
          "description": "Timestamp in milliseconds to expire the challenge. Defaults to 24h after creation. Can't be more than 2 weeks after crea...",
          "type": "number",
          "default": 0
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "challengeStartClocks": {
      "displayName": "Start clocks of a game",
      "description": "Start the clocks of a game immediately, even if a player has not yet made a move. Requires the OAuth tokens of both play...",
      "method": "post",
      "endpoint": "/api/challenge/{gameId}/start-clocks",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "token1",
          "location": "query",
          "required": true,
          "description": "OAuth token of a player",
          "type": "string",
          "default": ""
        },
        {
          "name": "token2",
          "location": "query",
          "required": false,
          "description": "OAuth token of the other player. Omit for AI games that have only one player",
          "type": "string",
          "default": ""
        }
      ]
    },
    "bulkPairingList": {
      "displayName": "View your bulk pairings",
      "description": "Get a list of bulk pairings you created.",
      "method": "get",
      "endpoint": "/api/bulk-pairing",
      "tags": [
        "Bulk pairing"
      ],
      "params": []
    },
    "bulkPairingCreate": {
      "displayName": "Create a bulk pairing",
      "description": "Schedule many games at once, up to 24h in advance. OAuth tokens are required for all paired players, with the `challenge...",
      "method": "post",
      "endpoint": "/api/bulk-pairing",
      "tags": [
        "Bulk pairing"
      ],
      "params": [
        {
          "name": "players",
          "location": "body",
          "required": false,
          "description": "OAuth tokens of all the players to pair, with the syntax `tokenOfWhitePlayerInGame1:tokenOfBlackPlayerInGame1,tokenOfWhi...",
          "type": "string",
          "default": ""
        },
        {
          "name": "clock.limit",
          "location": "body",
          "required": false,
          "description": "Clock initial time in seconds. Example: `600`",
          "type": "number",
          "default": 0
        },
        {
          "name": "clock.increment",
          "location": "body",
          "required": false,
          "description": "Clock increment in seconds. Example: `2`",
          "type": "number",
          "default": 0
        },
        {
          "name": "days",
          "location": "body",
          "required": false,
          "description": "Days per turn. For correspondence games only",
          "type": "number",
          "default": 0
        },
        {
          "name": "pairAt",
          "location": "body",
          "required": false,
          "description": "Date at which the games will be created as a Unix timestamp in milliseconds. Up to 7 days in the future. Omit, or set to...",
          "type": "number",
          "default": 0
        },
        {
          "name": "startClocksAt",
          "location": "body",
          "required": false,
          "description": "Date at which the clocks will be automatically started as a Unix timestamp in milliseconds. Up to 7 days in the future. ...",
          "type": "number",
          "default": 0
        },
        {
          "name": "rated",
          "location": "body",
          "required": false,
          "description": "Game is rated and impacts players ratings",
          "type": "boolean",
          "default": false
        },
        {
          "name": "variant",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. standard"
        },
        {
          "name": "fen",
          "location": "body",
          "required": false,
          "description": "Custom initial position (in FEN). Variant must be standard, fromPosition, or chess960 (if a valid 960 starting position)...",
          "type": "string",
          "default": ""
        },
        {
          "name": "message",
          "location": "body",
          "required": false,
          "description": "Message that will be sent to each player, when the game is created.  It is sent from your user account. `{opponent}` and...",
          "type": "string",
          "default": ""
        },
        {
          "name": "rules",
          "location": "body",
          "required": false,
          "description": "Extra game rules separated by commas. Example: `noAbort,noRematch`",
          "type": "string",
          "default": ""
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "bulkPairingStartClocks": {
      "displayName": "Manually start clocks",
      "description": "Immediately start all clocks of the games of a bulk pairing. This overrides the `startClocksAt` value of an existing bul...",
      "method": "post",
      "endpoint": "/api/bulk-pairing/{id}/start-clocks",
      "tags": [
        "Bulk pairing"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "bulkPairingGet": {
      "displayName": "Show a bulk pairing",
      "description": "Get a single bulk pairing by its ID.",
      "method": "get",
      "endpoint": "/api/bulk-pairing/{id}",
      "tags": [
        "Bulk pairing"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "bulkPairingDelete": {
      "displayName": "Cancel a bulk pairing",
      "description": "Cancel and delete a bulk pairing that is scheduled in the future. If the games have already been created, then this does...",
      "method": "delete",
      "endpoint": "/api/bulk-pairing/{id}",
      "tags": [
        "Bulk pairing"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ]
    },
    "bulkPairingIdGamesGet": {
      "displayName": "Export games of a bulk pairing",
      "description": "Download games of a bulk in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the reque...",
      "method": "get",
      "endpoint": "/api/bulk-pairing/{id}/games",
      "tags": [
        "Bulk pairing"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Include the PGN moves",
          "type": "boolean",
          "default": true
        },
        {
          "name": "pgnInJson",
          "location": "query",
          "required": false,
          "description": "Include the full PGN within the JSON response, in a `pgn` field",
          "type": "boolean",
          "default": false
        },
        {
          "name": "tags",
          "location": "query",
          "required": false,
          "description": "Include the PGN tags",
          "type": "boolean",
          "default": true
        },
        {
          "name": "clocks",
          "location": "query",
          "required": false,
          "description": "Include clock status when available. Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }` Or in a ...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "evals",
          "location": "query",
          "required": false,
          "description": "Include analysis evaluations and comments, when available. Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eva...",
          "type": "boolean",
          "default": false
        },
        {
          "name": "accuracy",
          "location": "query",
          "required": false,
          "description": "Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available. Only available in JSON.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "opening",
          "location": "query",
          "required": false,
          "description": "Include the opening name. Example: `[Opening \"King's Gambit Accepted, King's Knight Gambit\"]`",
          "type": "boolean",
          "default": false
        },
        {
          "name": "division",
          "location": "query",
          "required": false,
          "description": "Plies which mark the beginning of the middlegame and endgame. Only available in JSON",
          "type": "boolean",
          "default": false
        },
        {
          "name": "literate",
          "location": "query",
          "required": false,
          "description": "Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination. Example: `...",
          "type": "boolean",
          "default": false
        }
      ]
    },
    "roundAddTime": {
      "displayName": "Add time to the opponent clock",
      "description": "Add seconds to the opponent's clock. Can be used to create games with time odds.",
      "method": "post",
      "endpoint": "/api/round/{gameId}/add-time/{seconds}",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "seconds",
          "location": "path",
          "required": true,
          "description": "How many seconds to give",
          "type": "string",
          "default": ""
        }
      ]
    },
    "adminChallengeTokens": {
      "displayName": "Admin challenge tokens",
      "description": "**This endpoint can only be used by Lichess administrators. It will not work if you do not have the appropriate permissi...",
      "method": "post",
      "endpoint": "/api/token/admin-challenge",
      "tags": [
        "Challenge"
      ],
      "params": [
        {
          "name": "users",
          "location": "body",
          "required": true,
          "description": "Usernames separated with commas",
          "type": "string",
          "default": "",
          "placeholder": "e.g. thibault,neio,lizen2,lizen3"
        },
        {
          "name": "description",
          "location": "body",
          "required": true,
          "description": "User visible description of the token",
          "type": "string",
          "default": "",
          "placeholder": "e.g. FIDE tournament XYZ"
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "inboxUsername": {
      "displayName": "Send a private message",
      "description": "Send a private message to another player.",
      "method": "post",
      "endpoint": "/inbox/{username}",
      "tags": [
        "Messaging"
      ],
      "params": [
        {
          "name": "username",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Thank you for the game!"
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "apiCloudEval": {
      "displayName": "Get cloud evaluation of a position",
      "description": "Get the cached evaluation of a position, if available. Opening positions have more chances of being available. There are...",
      "method": "get",
      "endpoint": "/api/cloud-eval",
      "tags": [
        "Analysis"
      ],
      "params": [
        {
          "name": "fen",
          "location": "query",
          "required": true,
          "description": "FEN of the position",
          "type": "string",
          "default": "",
          "placeholder": "e.g. r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R b KQkq - 3 3"
        },
        {
          "name": "multiPv",
          "location": "query",
          "required": false,
          "description": "Number of variations",
          "type": "number",
          "default": 1
        },
        {
          "name": "variant",
          "location": "query",
          "required": false,
          "description": "Variant",
          "type": "options",
          "default": "standard",
          "options": [
            "standard",
            "chess960",
            "crazyhouse",
            "antichess",
            "atomic",
            "horde",
            "kingOfTheHill",
            "racingKings",
            "threeCheck",
            "fromPosition"
          ]
        }
      ]
    },
    "apiExternalEngineList": {
      "displayName": "List external engines",
      "description": "Lists all external engines that have been registered for the user, and the credentials required to use them.",
      "method": "get",
      "endpoint": "/api/external-engine",
      "tags": [
        "External engine"
      ],
      "params": []
    },
    "apiExternalEngineCreate": {
      "displayName": "Create external engine",
      "description": "Registers a new external engine for the user. It can then be selected and used on the analysis board. After registering,...",
      "method": "post",
      "endpoint": "/api/external-engine",
      "tags": [
        "External engine"
      ],
      "params": [
        {
          "name": "name",
          "location": "body",
          "required": true,
          "description": "Display name of the engine",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Stockfish 15"
        },
        {
          "name": "maxThreads",
          "location": "body",
          "required": true,
          "description": "Maximum number of available threads",
          "type": "number",
          "default": 0
        },
        {
          "name": "maxHash",
          "location": "body",
          "required": true,
          "description": "Maximum available hash table size, in MiB",
          "type": "number",
          "default": 0
        },
        {
          "name": "variants",
          "location": "body",
          "required": false,
          "description": "Optional list of supported chess variants",
          "type": "string",
          "default": ""
        },
        {
          "name": "providerSecret",
          "location": "body",
          "required": true,
          "description": "A random token that can be used to [wait for analysis requests](#tag/External-engine/operation/apiExternalEngineAcquire)...",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Dee3uwieZei9ahpaici9bee2yahsai0K"
        },
        {
          "name": "providerData",
          "location": "body",
          "required": false,
          "description": "Arbitrary data that the engine provider can use for identification or bookkeeping.  Users can read this information, but...",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiExternalEngineGet": {
      "displayName": "Get external engine",
      "description": "Get properties and credentials of an external engine.",
      "method": "get",
      "endpoint": "/api/external-engine/{id}",
      "tags": [
        "External engine"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The external engine id",
          "type": "string",
          "default": "",
          "placeholder": "e.g. eei_aTKImBJOnv6j"
        }
      ]
    },
    "apiExternalEnginePut": {
      "displayName": "Update external engine",
      "description": "Updates the properties of an external engine.",
      "method": "put",
      "endpoint": "/api/external-engine/{id}",
      "tags": [
        "External engine"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The external engine id",
          "type": "string",
          "default": "",
          "placeholder": "e.g. eei_aTKImBJOnv6j"
        },
        {
          "name": "name",
          "location": "body",
          "required": true,
          "description": "Display name of the engine",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Stockfish 15"
        },
        {
          "name": "maxThreads",
          "location": "body",
          "required": true,
          "description": "Maximum number of available threads",
          "type": "number",
          "default": 0
        },
        {
          "name": "maxHash",
          "location": "body",
          "required": true,
          "description": "Maximum available hash table size, in MiB",
          "type": "number",
          "default": 0
        },
        {
          "name": "variants",
          "location": "body",
          "required": false,
          "description": "Optional list of supported chess variants",
          "type": "string",
          "default": ""
        },
        {
          "name": "providerSecret",
          "location": "body",
          "required": true,
          "description": "A random token that can be used to [wait for analysis requests](#tag/External-engine/operation/apiExternalEngineAcquire)...",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Dee3uwieZei9ahpaici9bee2yahsai0K"
        },
        {
          "name": "providerData",
          "location": "body",
          "required": false,
          "description": "Arbitrary data that the engine provider can use for identification or bookkeeping.  Users can read this information, but...",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiExternalEngineDelete": {
      "displayName": "Delete external engine",
      "description": "Unregisters an external engine.",
      "method": "delete",
      "endpoint": "/api/external-engine/{id}",
      "tags": [
        "External engine"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The external engine id",
          "type": "string",
          "default": "",
          "placeholder": "e.g. eei_aTKImBJOnv6j"
        }
      ]
    },
    "apiExternalEngineAnalyse": {
      "displayName": "Analyse with external engine",
      "description": "**Endpoint: `https://engine.lichess.ovh/api/external-engine/{id}/analyse`** Request analysis from an external engine. Re...",
      "method": "post",
      "endpoint": "/api/external-engine/{id}/analyse",
      "tags": [
        "External engine"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "The external engine id",
          "type": "string",
          "default": "",
          "placeholder": "e.g. eei_aTKImBJOnv6j"
        },
        {
          "name": "clientSecret",
          "location": "body",
          "required": true,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. ees_mdF2hK0hlKGSPeC6"
        },
        {
          "name": "work",
          "location": "body",
          "required": true,
          "description": "",
          "type": "json",
          "default": "{}"
        }
      ],
      "baseUrl": "https://engine.lichess.ovh"
    },
    "apiExternalEngineAcquire": {
      "displayName": "Acquire analysis request",
      "description": "**Endpoint: `https://engine.lichess.ovh/api/external-engine/work`** Wait for an analysis requests to any of the external...",
      "method": "post",
      "endpoint": "/api/external-engine/work",
      "tags": [
        "External engine"
      ],
      "params": [
        {
          "name": "providerSecret",
          "location": "body",
          "required": false,
          "description": "",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Dee3uwieZei9ahpaici9bee2yahsai0K"
        }
      ],
      "baseUrl": "https://engine.lichess.ovh"
    },
    "apiExternalEngineSubmit": {
      "displayName": "Answer analysis request",
      "description": "**Endpoint: `https://engine.lichess.ovh/api/external-engine/work/{id}`** Submit a stream of analysis as [UCI output](htt...",
      "method": "post",
      "endpoint": "/api/external-engine/work/{id}",
      "tags": [
        "External engine"
      ],
      "params": [
        {
          "name": "id",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        },
        {
          "name": "text",
          "location": "body",
          "required": true,
          "type": "string",
          "default": "",
          "description": "Analysis results",
          "placeholder": "e.g. info multipv 1 depth 20 seldepth 30 time 1373 nodes 1494341 score cp 47 hashfull 594 nps 1088376 tbhits 0 pv d2d4 d7d5 c2c4 e7e6 b1c3 f8b4 c4d5 e6d5 g1f3 g8f6 c1g5 h7h6 g5f6 d8f6 d1b3 c7c5 e2e3 b8c6 d4c5 e8g8 f1d3"
        }
      ],
      "baseUrl": "https://engine.lichess.ovh",
      "headers": {
        "Content-Type": "text/plain"
      }
    },
    "oauth": {
      "displayName": "Request authorization code",
      "description": "OAuth2 authorization endpoint. Start the OAuth2 Authorization Code Flow with PKCE by securely generating two random stri...",
      "method": "get",
      "endpoint": "/oauth",
      "tags": [
        "OAuth"
      ],
      "params": [
        {
          "name": "response_type",
          "location": "query",
          "required": true,
          "description": "Must be `code`",
          "type": "string",
          "default": ""
        },
        {
          "name": "client_id",
          "location": "query",
          "required": true,
          "description": "Arbitrary identifier that uniquely identifies your application",
          "type": "string",
          "default": "",
          "placeholder": "e.g. example.com"
        },
        {
          "name": "redirect_uri",
          "location": "query",
          "required": true,
          "description": "The absolute URL that the user should be redirected to with the authorization result",
          "type": "string",
          "default": ""
        },
        {
          "name": "code_challenge_method",
          "location": "query",
          "required": true,
          "description": "Must be `S256`",
          "type": "string",
          "default": ""
        },
        {
          "name": "code_challenge",
          "location": "query",
          "required": true,
          "description": "Compute `BASE64URL(SHA256(code_verifier))`",
          "type": "string",
          "default": ""
        },
        {
          "name": "scope",
          "location": "query",
          "required": false,
          "description": "Space separated list of requested OAuth scopes, if any",
          "type": "string",
          "default": ""
        },
        {
          "name": "username",
          "location": "query",
          "required": false,
          "description": "Hint that you want the user to log in with a specific Lichess username",
          "type": "string",
          "default": ""
        },
        {
          "name": "state",
          "location": "query",
          "required": false,
          "description": "Arbitrary state that will be returned verbatim with the authorization result",
          "type": "string",
          "default": ""
        }
      ]
    },
    "apiToken": {
      "displayName": "Obtain access token",
      "description": "OAuth2 token endpoint. Exchanges an authorization code for an access token.",
      "method": "post",
      "endpoint": "/api/token",
      "tags": [
        "OAuth"
      ],
      "params": [
        {
          "name": "grant_type",
          "location": "body",
          "required": false,
          "description": "Must be `authorization_code`",
          "type": "string",
          "default": "",
          "placeholder": "e.g. authorization_code"
        },
        {
          "name": "code",
          "location": "body",
          "required": false,
          "description": "The authorization code that was sent in the `code` parameter to your `redirect_uri`",
          "type": "string",
          "default": "",
          "placeholder": "e.g. liu_iS1uOZg99Htmo58ex2jKgYziUfzsnAl0"
        },
        {
          "name": "code_verifier",
          "location": "body",
          "required": false,
          "description": "A `code_challenge` was used to request the authorization code. This must be the `code_verifier` it was derived from",
          "type": "string",
          "default": "",
          "placeholder": "e.g. Ry1rbGdOMTQtUjhOc0lmTnFKak1LTHV0NjlRMll2aXYtTThkQnlJRkRpaGwyQjh0ZDNFdzFPSG9KUlY4M1NrRzJ5ZHhUdjVZR08zLTZOT3dCN2xLfjZOXzU2WHk4SENP"
        },
        {
          "name": "redirect_uri",
          "location": "body",
          "required": false,
          "description": "Must match the `redirect_uri` used to request the authorization code",
          "type": "string",
          "default": "",
          "placeholder": "e.g. http://example.com/"
        },
        {
          "name": "client_id",
          "location": "body",
          "required": false,
          "description": "Must match the `client_id` used to request the authorization code",
          "type": "string",
          "default": "",
          "placeholder": "e.g. example.com"
        }
      ],
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    "apiTokenDelete": {
      "displayName": "Revoke access token",
      "description": "Revokes the access token sent as Bearer for this request",
      "method": "delete",
      "endpoint": "/api/token",
      "tags": [
        "OAuth"
      ],
      "params": []
    },
    "tokenTest": {
      "displayName": "Test multiple OAuth tokens",
      "description": "For up to 1000 OAuth tokens, returns their associated user ID and scopes, or `null` if the token is invalid. The method ...",
      "method": "post",
      "endpoint": "/api/token/test",
      "tags": [
        "OAuth"
      ],
      "params": [
        {
          "name": "text",
          "location": "body",
          "required": true,
          "type": "string",
          "default": "",
          "description": "OAuth tokens separated by commas. Up to 1000",
          "placeholder": "e.g. lip_AvsS88TozFeSMEaoLN5c,lip_badToken"
        }
      ],
      "headers": {
        "Content-Type": "text/plain"
      }
    },
    "openingExplorerMaster": {
      "displayName": "Masters database",
      "description": "**Endpoint: <https://explorer.lichess.ovh/masters>**  Example: `curl https://explorer.lichess.ovh/masters?play=d2d4,d7d5...",
      "method": "get",
      "endpoint": "/masters",
      "tags": [
        "Opening Explorer"
      ],
      "params": [
        {
          "name": "fen",
          "location": "query",
          "required": false,
          "description": "FEN of the root position",
          "type": "string",
          "default": "",
          "placeholder": "e.g. rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
        },
        {
          "name": "play",
          "location": "query",
          "required": false,
          "description": "Comma separated sequence of legal moves in UCI notation. Play additional moves starting from `fen`. Required to find an ...",
          "type": "string",
          "default": "",
          "placeholder": "e.g. d2d4,d7d5,c2c4,c7c6,c4d5"
        },
        {
          "name": "since",
          "location": "query",
          "required": false,
          "description": "Include only games from this year or later",
          "type": "number",
          "default": 1952
        },
        {
          "name": "until",
          "location": "query",
          "required": false,
          "description": "Include only games from this year or earlier",
          "type": "number",
          "default": 0
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Number of most common moves to display",
          "type": "number",
          "default": 12
        },
        {
          "name": "topGames",
          "location": "query",
          "required": false,
          "description": "Number of top games to display",
          "type": "number",
          "default": 15
        }
      ],
      "baseUrl": "https://explorer.lichess.ovh"
    },
    "openingExplorerLichess": {
      "displayName": "Lichess games",
      "description": "**Endpoint: <https://explorer.lichess.ovh/lichess>**  Games sampled from all Lichess players.  Example: `curl https://ex...",
      "method": "get",
      "endpoint": "/lichess",
      "tags": [
        "Opening Explorer"
      ],
      "params": [
        {
          "name": "variant",
          "location": "query",
          "required": false,
          "description": "Variant",
          "type": "options",
          "default": "standard",
          "options": [
            "standard",
            "chess960",
            "crazyhouse",
            "antichess",
            "atomic",
            "horde",
            "kingOfTheHill",
            "racingKings",
            "threeCheck",
            "fromPosition"
          ]
        },
        {
          "name": "fen",
          "location": "query",
          "required": false,
          "description": "FEN or EPD of the root position",
          "type": "string",
          "default": "",
          "placeholder": "e.g. rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2"
        },
        {
          "name": "play",
          "location": "query",
          "required": false,
          "description": "Comma separated sequence of legal moves in UCI notation. Play additional moves starting from `fen`. Required to find an ...",
          "type": "string",
          "default": "",
          "placeholder": "e.g. d2d4,d7d5,c2c4,c7c6,c4d5"
        },
        {
          "name": "speeds",
          "location": "query",
          "required": false,
          "description": "Comma separated list of game speeds to filter by",
          "type": "string",
          "default": ""
        },
        {
          "name": "ratings",
          "location": "query",
          "required": false,
          "description": "Comma separated list of ratings groups to filter by. Each group ranges from its value to the next higher group in the en...",
          "type": "json",
          "default": "{}"
        },
        {
          "name": "since",
          "location": "query",
          "required": false,
          "description": "Include only games from this month or later",
          "type": "string",
          "default": "1952-01"
        },
        {
          "name": "until",
          "location": "query",
          "required": false,
          "description": "Include only games from this month or earlier",
          "type": "string",
          "default": "3000-12"
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Number of most common moves to display",
          "type": "number",
          "default": 12
        },
        {
          "name": "topGames",
          "location": "query",
          "required": false,
          "description": "Number of top games to display",
          "type": "number",
          "default": 4
        },
        {
          "name": "recentGames",
          "location": "query",
          "required": false,
          "description": "Number of recent games to display",
          "type": "number",
          "default": 4
        },
        {
          "name": "history",
          "location": "query",
          "required": false,
          "description": "Optionally retrieve history",
          "type": "boolean",
          "default": false
        }
      ],
      "baseUrl": "https://explorer.lichess.ovh"
    },
    "openingExplorerPlayer": {
      "displayName": "Player games",
      "description": "**Endpoint: <https://explorer.lichess.ovh/player>**  Games of a Lichess player.  Responds with a stream of [newline deli...",
      "method": "get",
      "endpoint": "/player",
      "tags": [
        "Opening Explorer"
      ],
      "params": [
        {
          "name": "player",
          "location": "query",
          "required": true,
          "description": "Username or ID of the player",
          "type": "string",
          "default": "",
          "placeholder": "e.g. revoof"
        },
        {
          "name": "color",
          "location": "query",
          "required": true,
          "description": "Look for games with *player* on the given side",
          "type": "options",
          "default": "white",
          "options": [
            "white",
            "black"
          ]
        },
        {
          "name": "variant",
          "location": "query",
          "required": false,
          "description": "Variant",
          "type": "options",
          "default": "standard",
          "options": [
            "standard",
            "chess960",
            "crazyhouse",
            "antichess",
            "atomic",
            "horde",
            "kingOfTheHill",
            "racingKings",
            "threeCheck",
            "fromPosition"
          ]
        },
        {
          "name": "fen",
          "location": "query",
          "required": false,
          "description": "FEN of the root position",
          "type": "string",
          "default": "",
          "placeholder": "e.g. rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
        },
        {
          "name": "play",
          "location": "query",
          "required": false,
          "description": "Comma separated sequence of legal moves in UCI notation. Play additional moves starting from `fen`. Required to find an ...",
          "type": "string",
          "default": "",
          "placeholder": "e.g. d2d4,d7d5"
        },
        {
          "name": "speeds",
          "location": "query",
          "required": false,
          "description": "Comma separated list of game speeds to look for",
          "type": "string",
          "default": ""
        },
        {
          "name": "modes",
          "location": "query",
          "required": false,
          "description": "Comma separated list of modes",
          "type": "string",
          "default": ""
        },
        {
          "name": "since",
          "location": "query",
          "required": false,
          "description": "Include only games from this month or later",
          "type": "string",
          "default": "1952-01"
        },
        {
          "name": "until",
          "location": "query",
          "required": false,
          "description": "Include only games from this month or earlier",
          "type": "string",
          "default": "3000-12"
        },
        {
          "name": "moves",
          "location": "query",
          "required": false,
          "description": "Number of most common moves to display",
          "type": "number",
          "default": 0
        },
        {
          "name": "recentGames",
          "location": "query",
          "required": false,
          "description": "Number of recent games to display",
          "type": "number",
          "default": 8
        }
      ],
      "baseUrl": "https://explorer.lichess.ovh"
    },
    "openingExplorerMasterGame": {
      "displayName": "OTB master game",
      "description": "**Endpoint: `https://explorer.lichess.ovh/masters/pgn/{gameId}`**  Example: `curl https://explorer.lichess.ovh/masters/p...",
      "method": "get",
      "endpoint": "/master/pgn/{gameId}",
      "tags": [
        "Opening Explorer"
      ],
      "params": [
        {
          "name": "gameId",
          "location": "path",
          "required": true,
          "description": "",
          "type": "string",
          "default": ""
        }
      ],
      "baseUrl": "https://explorer.lichess.ovh"
    },
    "tablebaseStandard": {
      "displayName": "Tablebase lookup",
      "description": "**Endpoint: <https://tablebase.lichess.ovh>** Example: `curl http://tablebase.lichess.ovh/standard?fen=4k3/6KP/8/8/8/8/7...",
      "method": "get",
      "endpoint": "/standard",
      "tags": [
        "Tablebase"
      ],
      "params": [
        {
          "name": "fen",
          "location": "query",
          "required": true,
          "description": "FEN of the position. Underscores allowed",
          "type": "string",
          "default": ""
        }
      ],
      "baseUrl": "https://tablebase.lichess.ovh"
    },
    "tablebaseAtomic": {
      "displayName": "Tablebase lookup for Atomic chess",
      "description": "**Endpoint: <https://tablebase.lichess.ovh>**",
      "method": "get",
      "endpoint": "/atomic",
      "tags": [
        "Tablebase"
      ],
      "params": [],
      "baseUrl": "https://tablebase.lichess.ovh"
    },
    "antichessAtomic": {
      "displayName": "Tablebase lookup for Antichess",
      "description": "**Endpoint: <https://tablebase.lichess.ovh>**",
      "method": "get",
      "endpoint": "/antichess",
      "tags": [
        "Tablebase"
      ],
      "params": [],
      "baseUrl": "https://tablebase.lichess.ovh"
    }
  }
}